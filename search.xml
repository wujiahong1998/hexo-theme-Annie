<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2020%2F01%2F11%2Ftest%2F</url>
    <content type="text"><![CDATA[123456int main()&#123;return 0;&#125; * * * * * * * * * * * * *]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo再配置]]></title>
    <url>%2F2020%2F01%2F11%2Fhexo%E5%86%8D%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Hexo的一些配置之前配置了一些，现在再配置一些 切换主题直接在_config.yml文件下修改即可，不过得先下载号需要的主题文件 新建文章使用命令hexo new &quot;文章名&quot;,新建一个新的文章 假如需要为每一个新建的文章都用一个文件夹存文章需要用到的一些图片文件或者资源，可以进行如下的配置 到博客根目录下 查看_config.yml文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true -&gt; post_asset_folder:true 执行 npm install https://github.com/CodeFalling/hexo-asset-image –save 命令来进行插件的安装 实现fork me on github在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码： 将刚刚复制的挂饰代码，添加到Blog/themes/next/layout/_layout.swig文件中，添加位置如下图所示(放在下方)： 文章末尾添加“文章结束”标记在路径Blog\themes\next\layout\_macro文件夹中新建passage-end-tag.swig文件。 在passage-end-tag.swig添加以下内容，直接用文本编辑器打开，粘贴以下内容后保存 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开Blog\themes\next\layout\_macro\post.swig，在post-body之后，post-footer之前（post-footer之前两个DIV），添加以下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 添加代码位置如下： 修改主题配置文件**_config.yml**，在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 配置完成。 文章显示一部分在需要显示的内容之后（屏蔽的内容之前）添加代码 &lt;!--more--&gt;即可 修改代码块自定义样式这里需要新建两个js文件events.js和codeblock.js，路径位于/themes/next/scripts/包下。 events.js代码：1234567// mac Panel效果代码块相关var exec = require('child_process').exec;// new 后自动打开编辑器hexo.on('new', function(data)&#123; exec('open -a MacDown ' + data.path);&#125;); 这个js会在你敲hexo new xxx命令后，调用本地的MarkDown编辑器打开新建的md文件xxx codeblock.js代码：12345678910111213141516171819202122// mac Panel效果代码块相关var attributes = [ 'autocomplete="off"', 'autocorrect="off"', 'autocapitalize="off"', 'spellcheck="false"', 'contenteditable="true"']var attributesStr = attributes.join(' ')hexo.extend.filter.register('after_post_render', function (data) &#123; while (/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/.test(data.content)) &#123; data.content = data.content.replace(/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/, function () &#123; var language = RegExp.$1 || 'plain' var lastMatch = RegExp.lastMatch lastMatch = lastMatch.replace(/&lt;figure class="highlight /, '&lt;figure class="iseeu highlight /') return '&lt;div class="highlight-wrap"' + attributesStr + 'data-rel="' + language.toUpperCase() + '"&gt;' + lastMatch + '&lt;/div&gt;' &#125;) &#125; return data&#125;) 引入css在/themes/next/source/css/_common/components/highlight/目录下新建macPanel.styl文件，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// mac Panel效果代码块相关.highlight-wrap[data-rel] &#123; position: relative; overflow: hidden; border-radius: 5px; //box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4); box-shadow:18px 18px 15px 0px rgba(0,0,0,.4) margin: 35px 0; ::-webkit-scrollbar &#123; height: 10px; &#125; ::-webkit-scrollbar-track &#123; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; &#125; ::-webkit-scrollbar-thumb &#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); &#125; &amp;::before &#123; color: white; content: attr(data-rel); height: 38px; line-height: 38px; //background: #21252b; background: #108414de; color: #fff; font-size: 16px; //position: absolute; top: 0; left: 0; width: 100%; //font-family: 'Source Sans Pro', sans-serif; font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; &#125; &amp;::after &#123; content: ' '; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; &#125;&#125; 配置引用在/themes/next/source/css/_common/components/highlight/highlight.styl中引入刚才新建的macPanel.styl： 1@require "macPanel" 配置在文件的顶部位置即可。 到此Mac Panel配置完成，根据需要可调整主题配置文件中的highlight_theme的值，选择自己喜欢的样式。 遇到错误可将**站点配置文件里的highlight属性auto_detect改成false： 123456highlight: enable: true line_number: true- auto_detect: true+ auto_detect: false tab_replace: 代码块复制功能下载 clipboard.js 下载第三方插件：clipboard.js, 或者直接下载 (右键另存为)。 保存文件到 theme/next/source/js/src 下。 在 theme/next/source/js/src 目录下，创建 clipboard-use.js，添加内容如下： 1234567891011121314151617/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'; copyHtml += '&lt;span&gt;复制&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(".highlight .code pre").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); &#125; initCopyCode();&#125;(window, document); 在 theme/next/source/css/_custom/custom.styl 样式中添加如下代码： 123456789101112131415161718192021222324252627282930313233343536//代码块复制按钮.highlight&#123; //方便copy代码按钮（btn-copy）的定位 position: relative;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125; 在 themes/next/layout/_layout.swig 文件中引用（/body）之前添加： 123&lt;!-- 代码块复制功能 --&gt;&lt;script type="text/javascript" src="/js/src/clipboard.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/js/src/clipboard-use.js"&gt;&lt;/script&gt; 或者将 clipboard.min.js 和 clipboard-use.js 保存到类似七牛云上，通过引用也可（推荐） 侧边栏社交小图标设置打开主题配置文件_config.yml，command+f搜索Social，将你有的社交账号前面的#号去掉。格式为： 1[社交平台名]: [社交地址] || [图标名称] 图标可以去Font Awesome Icon网站去找，找到后复制名字到相应的位置即可。 添加热度进入LeanCloud官网，进行账号注册。登录后，进入控制台，创建应用，应用名为Hexo如下图所示： 访问量网站底部字数统计安装hexo插件，切换到根目录： 1npm install hexo-wordcount --save 在Blog/themes/next/layout/_partials/footer.swig末尾添加代码： 1234&lt;div class="theme-info"&gt; &lt;div class="powered-by"&gt;&lt;/div&gt; &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 设置网站的图标Favicon在图标网站找一张你喜欢的图标（大：32x32 小：16x16），图标网站：easyicon或者阿里巴巴矢量图标库。将下载下来的小图和中图放在Blog/themes/next/source/images，将默认的两张图片替换掉。命名和默认的一样也可以自己定义： 修改主题配置文件，如果你自定义了图片名字，需要做修改： 123456789# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png //16X16小图 medium: /images/favicon-32x32-next.png //32X32大图 apple_touch_icon: /images/apple-touch-icon-next.png //apple-touch-icon safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 实现文章统计功能 安装Hexo插件，参考网站底部字数统计。 编辑主题配置文件，配置如下： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true 添加来必力云跟帖功能首先去来必力注册账号，然后进入后台管理系统，如下图所示 添加jiathis分享网页标题崩溃特效当用户离开站点相关的页面时，网页的标题会变成已崩溃，网站图标也会改变；当用户重新回到站点页面时又恢复正常。 实现方式： 在/themes/next/source/js/src/目录下新建crash_cheat.js，代码如下： 1234567891011121314151617181920/* 离开当前页面时修改网页标题，回到当前页面时恢复原来标题 */window.onload = function() &#123; var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function() &#123; if(document.hidden) &#123; $('[rel="icon"]').attr('href', "../../images/failure.png"); $('[rel="shortcut icon"]').attr('href', "../../images/failure.png"); document.title = '(●—●)喔哟，崩溃啦！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "../../images/favicon-32x32-next.png"); $('[rel="shortcut icon"]').attr('href', "../../images/favicon-32x32-next.png"); document.title = '(/≧▽≦/)咦！页面又好了！'; titleTime = setTimeout(function() &#123; document.title = OriginTitile; &#125;, 2000); &#125; &#125;);&#125;; 在/themes/next/layout/_layout.swig文件末尾，添加引用： 12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/crash_cheat.js"&gt;&lt;/script&gt; 最后在站点根目录的/themes/next/source/images/目录下添加failure.png，作为网站崩溃时显示的图标，如下： 完成效果如下： 集成Gitalk评论自定义友链页面新增 links 页面在控制台使用命令创建： 1$ hexo new page links 然后在博客根目录 /source 下会生成一个 links 文件夹，打开其中的 index.md 文件，在头部写入 type = “links”，如下： 12345---title: 友情链接date: 2019-08-11 15:34:16+ type: "links"--- 关闭评论 123456---title: 友情链接date: 2019-08-11 15:34:16type: "links"+ comments: false--- 配置 menu主题配置文件中menu下添加： 1links: /links/ || link 在 /themes/next/languages/zh-Hans.yml 文件中 menu 下增加中文描述 1links: 友链 接下来就是要增加友链页面的样式了 新增 links.swig 页在 /themes/next/layout/ 新建 links.swig，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&#123;% block content %&#125; &#123;######################&#125; &#123;### LINKS BLOCK ###&#125; &#123;######################&#125; &lt;div id="links"&gt; &lt;style&gt; #links&#123; margin-top: 5rem; &#125; .links-content&#123; margin-top:1rem; &#125; .link-navigation::after &#123; content: " "; display: block; clear: both; &#125; .card &#123; width: 300px; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; &#125; .card:nth-child(odd) &#123; float: left; &#125; .card:nth-child(even) &#123; float: right; &#125; .card:hover &#123; transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); &#125; .card a &#123; border:none; &#125; .card .ava &#123; width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; &#125; .card .card-header &#123; font-style: italic; overflow: hidden; width: 236px; &#125; .card .card-header a &#123; font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; &#125; .card .card-header a:hover &#123; color: #d480aa; text-decoration: none; &#125; .card .card-header .info &#123; font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; &#125; &lt;/style&gt; &lt;div class="links-content"&gt; &lt;div class="link-navigation"&gt; &#123;% for link in theme.mylinks %&#125; &lt;div class="card"&gt; &lt;img class="ava" src="&#123;&#123; link.avatar &#125;&#125;"/&gt; &lt;div class="card-header"&gt; &lt;div&gt; &lt;a href="&#123;&#123; link.site &#125;&#125;" target="_blank"&gt; &#123;&#123; link.nickname &#125;&#125;&lt;/a&gt; &lt;a href="&#123;&#123; link.site &#125;&#125;" target="_blank"&gt;&lt;span class="focus-links"&gt;关注&lt;/span&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="info"&gt;&#123;&#123; link.info &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;&#123; page.content &#125;&#125; &lt;/div&gt; &lt;/div&gt; &#123;##########################&#125; &#123;### END LINKS BLOCK ###&#125; &#123;##########################&#125;&#123;% endblock %&#125; 修改 page.swig修改 /themes/next/layout/page.swig 文件，在开头的 block title 内部 12#&#125;&#123;% elif page.type === "tags" and not page.title %&#125;&#123;# #&#125;&#123;&#123; __('title.tag') + page_title_suffix &#125;&#125;&#123;# 这个位置下添加代码： 123&lt;!-- 友情链接--&gt;#&#125;&#123;% elif page.type === 'links' and not page.title %&#125;&#123;# #&#125;&#123;&#123; __('title.links') + page_title_suffix &#125;&#125;&#123;# 效果图： 引入 links.swig接着在 /themes/next/layout/page.swig 中 PAGE BODY 内部，引入刚才新建的 page.swig : 123&lt;!-- 友情链接--&gt;&#123;% elif page.type === 'links' %&#125; &#123;% include 'links.swig' %&#125; 完成页面样式的配置 配置友链接下来，在 /themes/next/_config.yml 文件中配置友链，末尾处新增 mylinks ，如下 123456789101112131415161718192021mylinks:- nickname: Leaf's Blog avatar: https://www.liaofuzhan.com/images/beichen.png site: https://www.liaofuzhan.com info: 因心造境，风云由我！ - nickname: Victor's Blog avatar: https://jiahong.cf/myPhotos/hicon.jpg site: https://jiahong.cf info: Victor's Home- nickname: hoxis' blog avatar: https://hoxis.github.io/uploads/avatar.png site: https://hoxis.github.io/ info: 生命在于折腾 - nickname: Never_yu avatar: https://neveryu.github.io/avatar/avatar.png site: https://neveryu.github.io/ info: 认真的人才有资格开玩笑 最终效果：]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2F2020%2F01%2F11%2Fhello%2F</url>
    <content type="text"><![CDATA[Hi]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络理解]]></title>
    <url>%2F2019%2F06%2F19%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、总体认识—七层模型与四层模型 七层模型图解： 三种模型结构 二、网络不同层的协议]]></content>
      <tags>
        <tag>-学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MechineLearning]]></title>
    <url>%2F2019%2F05%2F24%2FMechineLearning%2F</url>
    <content type="text"><![CDATA[Python学习路线]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dynamic]]></title>
    <url>%2F2019%2F05%2F18%2F%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[动态规划1.What is Dynamic Programming Algorithm动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段）,按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息. 由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。这样可以减少运算量。 动态规划算法一般分为以下四个步骤： 描述最优解的结构 递归定义最优解的值 按自底向上的方式计算出最优解的值 由计算出的结果构造一个最优解（前三不是动态规划的基础，第四步是特殊要求） 适合采用动态规划方法的最优化问题两要素:最优子结构性质，子问题重叠性质 最优子结构 如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。意思就是，总问题包含很多个子问题，而这些子问题的解也是最优的。 重叠子问题 子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率。 2.LCS问题的解决LCS即最长公共子序列问题，它不要求所求得的字符在所给的字符串中是连续的（例如：输入两个字符串BDCABA和ABCBDAB，字符串BCBA和BDAB都是是它们的最长公共子序列，则输出它们的长度4，并打印任意一个子序列）。 记： Xi=﹤x1，⋯，xi﹥即X序列的前i个字符 (1≤i≤m)（前缀） Yj=﹤y1，⋯，yj﹥即Y序列的前j个字符 (1≤j≤n)（前缀） 假定 Z=﹤z1，⋯，zk﹥∈LCS(X , Y)。 若xm = yn(最后一个字符相等)，该字符必是X与Y的任一最长公共子序列Z(假定长度为k)的最后一个字符,即有xm = yn = zk。那么显然有Zk-1∈ LCS(Xm-1,Yn-1)，即Z的前缀Zk-1是Xm-1与Yn-1的最长公共子序列。此时问题转化为求Xm-1与Yn-1的LCS。 若xm != yn，那么Xm与Yn的最长公共子序列要么为LCS(Xm,Yn-1)，要么为LCS(Xm-1,Yn)。LCS(X , Y)的长度为：max{LCS(Xm-1 , Y)的长度, LCS(X , Yn-1)的长度} 由于上述当xm≠yn的情况中，求LCS(Xm-1 , Y)的长度与LCS(X , Yn-1)的长度，这两个问题不是相互独立的：两者都需要求LCS(Xm-1，Yn-1)的长度。另外两个序列的LCS中包含了两个序列的前缀的LCS，故问题具有最优子结构性质考虑用动态规划法。 也就是说，解决这个LCS问题，你要求三个方面的东西：1、LCS（Xm-1，Yn-1）+1；2、LCS（Xm-1，Y），LCS（X，Yn-1）；3、max{LCS（Xm-1，Y），LCS（X，Yn-1）}。]]></content>
      <tags>
        <tag>C++</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专业研究英语学习]]></title>
    <url>%2F2019%2F05%2F11%2F%E4%B8%93%E4%B8%9A%E7%A0%94%E7%A9%B6%E8%8B%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[专业研究英语1.Modles(Deep Learning) SVM Boosting Decision tree KNN 2.Classical Deep Models CNN (Convolutional Neural Networks ）————卷积神经网络 DBN(Deep Belief Net)————深度置信网络 Auto‐encoder————自编码 CNN： CNN由输入和输出层以及多个隐藏层组成，隐藏层可分为卷积层，池化层、RELU层和全连通层。 CNN主要有三大特色，分别是局部感知、权重共享和多卷积核。 主要结构及特点如下 DBN: 具有层次结构的数学算法:DNN(深度神经网络)-->DBM(深度玻尔兹曼机)-->DBN(深度置信网络) DBNs是一个概率生成模型，与传统的判别模型的神经网络相对，生成模型是建立一个观察数据和标签之间的联合分布，对P(Observation|Label)和 P(Label|Observation)都做了评估，而判别模型仅仅而已评估了后者，也就是P(Label|Observation). DBN由多个限制玻尔兹曼机（Restricted Boltzmann Machines）层组成 Auto‐encoder AutoEncoder包括两个过程：encode和decode，输入图片通过encode进行处理，得到code，再经过decode处理得到输出 类似图片的压缩与解压]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C程序的编译过程]]></title>
    <url>%2F2019%2F04%2F19%2FC%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前面的话学了这么久C++，但还是真不知道C++是如何编译成可执行文件的，下面我们就来探索探索C++的编译过程！ 大体编译过程在深入理解计算机系统吗，我们知道C语言的编译大致过程如下 C源程序－&gt;编译预处理－&gt;编译程序(生成*.s文件)－&gt;优化程序－&gt;汇编程序(生成*.o文件)－&gt;链接程序－&gt;可执行文件（*.out） 下面一步一步解析 1.预编译过程 编译预处理 : &emsp;&emsp;读取c源程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理。伪指令主要包括以下四个方面: (1) 宏定义指令如#define和#undef#define分带参的和不带参的 不带参的宏定义 #define 宏名 常量串 1#define name "wujiahong" 运行cout &lt;&lt; name &lt;&lt; endl;的结果为wujiahong 带参的宏定义 #define 宏名(形参表） 表达式串 1234#define sum(a,b) (a)+(b);//TODOint c = sum(1, 2);cout &lt;&lt; c &lt;&lt; endl; 运行结果为 3 处理过程：编译预处理后产生一个中间文件，文件中所有宏名（如果是带参数的宏，则宏名包括参数表在内）均用其对应的常量串或表达式串代替。替换过程称为“宏替换”或“宏展开” (2) 头文件包含指令如#include “FileName”或者#include等。 #include&lt;文件名&gt; 预处理器将在include子目录下搜索由文件名所指明的文件。这种方式称为“标准方式”，适用于嵌入C++提供的头文件，因为这些头文件一般都存在C++系统目录的include子目录下。 #include ″文件名″ 预处理器将首先在当前文件所在目录下搜索，如果找不到再按标准方式搜索。这种方式适用于嵌入用户自己建立的头文件。 (3) 条件编译指令如*#ifdef,#ifndef,#else,#elif,#endif,*等等 命令 作用 #if 编译预处理中的条件命令，相当于C语法中的if语句 #ifdef 判断某个宏是否被定义，若已定义，执行随后的语句 #ifndef 与#ifdef相反，判断某个宏是否未被定义 #elif 若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if #else 与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else #endif #if, #ifdef, #ifndef这些条件命令的结束标志. defined 与#if, #elif配合使用，判断某个宏是否被定义 (4) 特殊符号&emsp;&emsp;预编译程序可以识别一些特殊的符号。例如在源程序中出现的LINE标识将被解释为当前行号（十进数），FILE则被解释为当前被编译的C源程序的名称。预编译程序对于在源程序中出现的这些串将用合适的值进行替换。预编译程序所完成的基本上是对源程序的“替代”工作。经过此种替代，生成一个没有宏定义、没有条件编译指令、没有特殊符号的输出文件。这个文件的含义同没有经过预处理的源文件是相同的，但内容有所不同。下一步，此输出文件将作为编译程序的输入而被翻译成为机器指令。删除所有注释“//”，“/ /”以及添加行号，便于编译器编译时产生调试用的行号信息及用于编译时产生编译错误或警告时显示行号。 2. 编译阶段&emsp;&emsp;经过预编译得到的输出文件中，只有常量。如数字、字符串、变量的定义，以及C语言的关键字，如main、if、else、for、while、{,}、+、-、*、\等等。编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码（符号表）。 3. 优化阶段&emsp;&emsp;优化一部分是对中间代码的优化。这种优化不依赖于具体的计算机。另一种优化则主要针对目标代码的生成而进行的。 &emsp;&emsp;对于前一种优化，主要的工作是删除公共表达式、循环优化（代码外提、强度削弱、变换循环控制条件、已知量的合并等）、复写传播，以及无用赋值的删除等等。后一种类型的优化同机器的硬件结构密切相关，最主要的是考虑如何充分利用机器的各个硬件寄存器存放的有关变量的值，以减少对于内存的访问次数。另外，如何根据机器硬件执行指令的特点（如流线、RISC、CISC、VLIW等）而对指令进行一些调整使目标代码比较短，执行的效率比较高，也是一个重要的研究课题。经过优化得到的汇编代码必须经过汇编程序的汇编转换成相应的机器指令，方可能被机器执行。 4. 汇编过程&emsp;&emsp;汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个汇编源程序，都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。目标文件由段组成。通常一个目标文件中至少有两个段： &emsp;&emsp;&emsp;代码段： 该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写。 &emsp;&emsp;&emsp;数据段： 主要存放程序中要用到的各种全局变量或静态的局部变量。（.rodata和 .data） &ensp;&ensp;UNIX环境下主要有三种类型的目标文件： &emsp;&emsp;（1）可重定位文件： 其中包含有适合于其它目标文件链接来创建一个可执行的或者共享的目标文件的代码和数据。 &emsp;&emsp;（2）共享的目标文件： 这种文件存放了适合于在两种上下文里链接的代码和数据。第一种是链接程序可把它与其它可重定位文件及共享的目标文件一起处理来创建另一个目标文件；第二种是动态链接程序将它与另一个可执行文件及其它的共享目标文件结合到一起，创建一个进程映象。 &emsp;&emsp;（3）可执行文件： 它包含了一个可以被操作系统创建一个进程来执行之的文件。汇编程序生成的实际上是第一种类型的目标文件。对于后两种还需要其他的一些处理方能得到，这个就是链接程序的工作了。 5. 链接程序&emsp;&emsp;由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。 &emsp;&emsp;链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。 &emsp;&emsp;根据开发人员指定的库函数的链接方式的不同，链接处理可分为两种： &emsp;&emsp;（1）静态链接 在这种链接方式下，函数的代码（被应用程序引用的目标模块）将从其所在地静态链接库中被拷贝到最终的可执行程序中。这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。静态连接的劣势：浪费内存和磁盘空间，模块更新困难。 &emsp;&emsp;（2）动态链接 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射（优点：无拷贝环节，在内存中只有一份此共享代码，以节约存储器空间）到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。\ &emsp;&emsp;动态连接解决了共享的目标文件多个副本浪费磁盘和内存空间的问题。在内存中共享一个目标文件模块的好处不仅仅是节省内存，还可以减少物理页面的换入换出，亦可以增加CPU的cache hit （关于这部分在《深入理解计算机系统》中有详细介绍，尤其是程序的局部性原理的应用，以前写代码都是瞎写，根本不知道还有这么个优势）。 &emsp;&emsp;动态连接也有其缺点：很常见的一个问题是，当程序所依赖的某个模块更新后，由于新的模块与旧的模块之间接口不兼容，导致原有的程序无法运行。]]></content>
      <tags>
        <tag>C++</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux(一) 文件及目录基本操作]]></title>
    <url>%2F2019%2F04%2F08%2FLinux-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于刚开始接触Linux的小菜鸡来说，Linux真的让人摸不着头脑。在Linux中最核心的就是命令行操作，但是要想熟练的使用命令行，那首先就必须知道基本的文件目录操作！因为这是基石鸭！！ Linux目录结构Linux的目录结构是呈倒树形的，如下图 核心目录及其存放内容 目录 内容 /bin 构建最小系统所需要的命令 /sbin 和操作系统有关的命令 /boot 内核与启动文件 /dev 各种设备文件 /etc 系统软件的启动和配置文件 /home 用户的主目录 /root 超级用户root的根目录 /usr 非系统的程序和命令 /var 系统专用的数据和配置文件 /opt 可选的应用软件包 /tmp 临时文件存放点 路径绝对路径 ​ 从根目录(/)开始写起的文件或者目录。 相对路径 ​ 由当前目录开始写起的文件或者目录。 其中.表示当前目录，..表示上一级目录,查看当前目录用pwd 改变工作目录使用方法： 1cd [目录] 例如： 12cd .. //返回上一级目录cd /home/Download //进入Download目录 新增目录使用方法： 1mkdir [-m 模式] [-p] 目录名 -m按指定存储模式建立目录 -p建立目录时建立其所有不存在的父目 删除目录使用方法： 1rmdir [-p] 目录名 此命令要求其父目录拥有写权限 -p删除目录和其父目录 复制文件或目录使用方法： 1cp 源文件或目录 目的文件或目录 此命令要求其父目录拥有写权限 移动文件或目录使用方法： 1mv 源文件或目录 目的文件或目录 此命令要求其父目录拥有写权限 删除文件或目录使用方法： 1rm [-ir] 文件或目录 此命令要求其父目录拥有写权限 查找文件或目录使用方法： 1find [路径] [参数] 例如： 1find /-name smcapp 查看文件内容方法： 12345cat： 直接查阅文件内容，不翻页more： 翻页查看文件内容less： 类似more，比more更有弹性head： 查看文件前面几行内容，默认10行tail： 查肯文件后面几行内容，默认10行]]></content>
      <tags>
        <tag>学习</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机伦理归纳]]></title>
    <url>%2F2019%2F04%2F05%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BC%A6%E7%90%86%E5%BD%92%E7%BA%B3%2F</url>
    <content type="text"><![CDATA[[TOC] 伦理伦理学和计算机伦理学的基本概念伦理学伦理的基本概念是研究社会关系和秩序，即人与人，人与社会，人与自然之间的关系，以及社会生活应该是什么样的秩序，也称为道德哲学。 伦理学是为人们建立快乐的、有秩序的生活的理论，属于应用哲学的一个分支。研究关系，研究秩序的学课称为伦理学。 伦理学是一门研究世间万物之间的关系，研究宇宙万物之间如何维持一个良好秩序的学科。 计算机伦理学计算机伦理学是讨论、研究并教育人们如何使用计算机技术为人类的生活带来健康和幸福，控制最小化由它带来的不良影响的社会学科。 研究方法计算机伦理学采取了多学科合作、实证研究和案例分析为主的技术路线，也有采用社会调查的研究方法。 实证研究划分为实地研究、实验研究和调查研究。 伦理学的分析方法伦理学理论 相对主义 美德论 功利主义 义务论 伦理抉择5个基本原则 尊重生命原则 社会公正原则 自主原则 诚信原则 知情同意原则]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO博客优化（一）]]></title>
    <url>%2F2019%2F04%2F04%2FHEXO%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[HEXO博客（一）添加居中模块1&lt;blockquote class="blockquote-center"&gt;多去发掘别人身上的闪光点&lt;/blockquote&gt; 多去发掘别人身上的闪光点 添加小红心 将 love.js 文件添加到 \themes\next\source\js\src 文件目录下。 找到 \themes\next\layout\_layout.swing 文件， 在文件的后面， 标签之前 添加以下代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt;]]></content>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分治法]]></title>
    <url>%2F2019%2F04%2F02%2F%E5%88%86%E6%B2%BB%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.分治法的分析分治法往往会使用递归的方法，主要包含以下三个步骤 分解 解决 合并 使用递归方程对其运行时间进行分析 假设把原问题分解成a个子问题，每个子问题的规模是原问题的1/b，分解问题成子问题需要时间D(n)，合并子问题需要C(n)，那么可以得到如下的递归式：]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学生会个人总结]]></title>
    <url>%2F2019%2F03%2F31%2F%E5%AD%A6%E7%94%9F%E4%BC%9A%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[​ 大二的下学期刚刚来临，马上也就要进入大三了。回首当初懵懂无知的我，啥也不知道，有的只是好奇。从第一次参加学生会的面试的彷徨到自己面试新生的坦然，从中是我的成长。进入的计软团委学生会之后，我也从中慢慢学习，渐渐的成长，知道了怎么合作，有了一颗上进的心。 ​ 大一的时候，在部长们的带领下，完成了大型的迎新晚会和院内的毕业晚会的举办。真的感谢我的部长们，因为只有到了后来我做部长的时候，我才知道举办一场活动是有多么困难，其中需要协调的事真的很多。每一次的例会，每一次的工作，我都认真对待，虽然想法没有别人多，但我总时认真对待。到最后，我也总结出一场活动大致需要什么。一场活动最多也就几个小时，但是准备这场活动却要几个星期，甚至一个月。其中又分前期准备、中期准备还有后期准备，另外还有场制以及宣称和经费要考虑。所有的这些环节，少一个都不行，所以到了办活动的时候，我们就会有很多会议要开，大家一起讨论，一起商量，为的都是怎么把这个活动办好。有时候，宣传不是我们文娱部的擅长，这个时候我们就会找到我们的信宣部作为我们的后援，从这里，我也学会了合作的重要性。一个人的能力是远不及大家一起的努力的，众人拾柴才能火焰高！ ​ 作为文娱部的副部长，我觉的我的能力不是很够。在学生会担任部长的日子里，我看见很多比我优秀的人，它们或者擅于管理，或者擅于沟通，而我可能相对比较内敛，没有它们如此优秀。但是我总是在向他们看齐，他们是我最好的学习榜样。有些时候我也确实会觉得那个人或者谁谁不好，但是后面我这些观念都慢慢改变了。这可能源于我自己的学习，是我在一部电影《了不起的盖茨比》记忆深刻的一句话：“多去发现别人身上的闪光点”，而不是总看着别人的缺点。 ​ 在之后的文娱部有了新一届的干事之后，我们还要想着如何管理和培养它们，我们会给他们一部分事情做，让他们从中学习。从这里我也渐渐学习到一些管理的经验。 ​ 除了是一位学生会的成员，我其实也是一位爱学习的大学生，因为来到大学就是来学习的，在学生会是学习，学习专业知识也不能落下。以前的我几乎很少去图书馆，更多的是在宿舍玩游戏，甚至不知道有自习室。但是，我渐渐发现，以这样的生活度过我的大学生活，是不值得的。我想要成长，我想要进步，我想要和别人一样优秀。之后的我虽然有时也玩玩游戏，但是性质却跟以往不一样了，我真正能够做到控制自己，花更多的精力在学习上。 ​ 除了学习，我还有参加体育锻炼。我凭借自己的额实力，进入了院内的乒乓球队。在乒乓球队里面，我又认识到许多优秀的人，它们也不仅仅是只会打乒乓，每周一次和他们在一起训练的时候我也能学到很多。 ​ 总而言之，我认为自己的大学生活还是可以的。但是我自身也还有许多需要提高的地方，如何变得坦然，如何更加细致，如何擅于交流，这些都是我需要去解决的自身缺点，我希望在我未来的两年大学生活中，我能够迎着风继续进步！]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客优化]]></title>
    <url>%2F2019%2F03%2F27%2FHexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[插入音乐🎵很多音乐网站因为版权原因无法生成外链，这里介绍的是自己生成的外链 第一步 安装hexo-tag-aplayer插件 切换到hexo的目录下，运行以下代码进行安装： 1npm install --save hexo-tag-aplayer 第二步 在markdown文档中需要添加音乐的地方添加以下代码 1npm install --save hexo-tag-aplayer（单首歌曲） 添加歌单的方法 1&#123;% aplayerlist %&#125;&#123;"narrow": false,"autoplay": true,"showlrc": 3,"mode": "random","music": [&#123;"title": "平凡之路","author": "朴树","url": "http://og9ocpmwk.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.mp3","pic": "https://ogd99kckh.qnssl.com/1.jpg","lrc": "http://og9ocpmwk.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.txt"&#125;,&#123;"title": "野子","author": "苏运莹","url": "http://og9ocpmwk.bkt.clouddn.com/01%20%E9%87%8E%E5%AD%90.m4a","pic": "http://og9ocpmwk.bkt.clouddn.com/%E9%87%8E%E5%AD%90.jpg","lrc":"https://ogd99kckh.qnssl.com/%E9%87%8E%E5%AD%90.txt"&#125;]&#125;&#123;% endaplayerlist %&#125; markdown插入音乐一般做法 因为markdown兼容HTML语法，故可以在markdown文件中直接用HTML语法 1&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheightheight=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=420125990&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt; 插入视频第一步： 安装hexo-tag-dplayer 切换到hexo的目录下，运行以下代码进行安装： 1npm install hexo-tag-dplayer --save 第二步： 在markdown文档中需要添加视频的地方添加以下代码 1&#123;% dplayer "url=http://devtest.qiniudn.com/若能绽放光芒.mp4" "api=http://dplayer.daoapp.io" "pic=http://devtest.qiniudn.com/若能绽放光芒.png" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %&#125; markdown插入视频一般做法 因为markdown兼容HTML语法，故可以在markdown文件中直接用HTML语法 1&lt;embed src="http://player.youku.com/player.php/Type/Folder/Fid/27690810/Ob/1/sid/XMTY1MTI3NjMyNA==/v.swf" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" allowFullScreen="true" mode="transparent" type="application/x-shockwave-flash"&gt;&lt;/embed&gt; 123&lt;video width="480" height="320" controls&gt;&lt;source src="movie.mp4"&gt;&lt;/video&gt;]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的基本操作]]></title>
    <url>%2F2019%2F03%2F27%2FMarkdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[markdown基本语法 标题用#表示，一个#表示一级标题，两个#表示二级标题，以此类推，一共六级标题。 例如下面所示 列表 *+空格 无序列表 数字+.+空格 有序列表 引用引用 像这样，操作为j尖括号 &gt; +引用文本即可 图片与链接操作如下图: 粗体与斜体用两个*包含一段文字即可使用粗体，**这里是粗体** 用一个\*包含一段文字就是斜体，*这里是斜体* 表格​ 表格的创建比较麻烦 12345| Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 这是普通使用代码来写表格，但是考虑到这样写表格很麻烦，这里推荐一个轻量级编辑器Typora 下面是编辑器的创建表格操作 然后就可以看到创建出来的额表格了，如下图，是不是很方便！ 代码框作为一名优雅的程序员，要把代码优雅的放在文章里，那就使用&gt;code吧 12345678910def Select_Sort(A,len): for i in range(len): key = i for j in range(i+1,len): if A[j] &lt; A[key]: key = j if key != i: temp = A[key] A[key] = A[i] A[i] = temp 在Typora工具中的段落中亦可找到相应操作 分割线分割线的语法只需要另起一行，连续输入三个星号 *** 即可。 var ap = new APlayer({ element: document.getElementById("aplayer-bmUPQqOx"), narrow: false, autoplay: true, showlrc: false, music: { title: "“国王与乞丐”", author: "华晨宇", url: "https://file.globalupload.io/fvBf86IOBS.mp3", pic: "https://i.kfs.io/album/global/7070089,0v1/fit/500x500.jpg", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Let‘s think！]]></title>
    <url>%2F2019%2F03%2F27%2FSeconday%2F</url>
    <content type="text"><![CDATA[前段日子看了一部日剧名字叫做《3年A半全员人质》，感觉收获还是蛮多的。它教会我们不仅要学会成熟，还要学会思考。Let’s think！]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2019%2F03%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Start Today!Git常用命令创建用户名12$ git config --global user.name "yourname"$ git config --global user.email "youremail" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
