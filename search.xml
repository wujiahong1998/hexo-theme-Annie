<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MinGW在Windows下的使用]]></title>
    <url>%2Fposts%2F66cd7b15.html</url>
    <content type="text"><![CDATA[安装完MinGW之后，我们可以那它来作为C或C++的编译器，下面是MinGW的基本使用和SublimeText的配置CMD编译程序编译过程分为四个步骤：预处理、编译、汇编、链接。使用g++可以在命令行分别实现上面四个步骤。使用下面的程序作为例子。123456789101112131415161718#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;// this is my test program#ifndef myNum#define myNum 666#endifint main()&#123; cout &lt;&lt; "Hello!" &lt;&lt; endl; cout &lt;&lt; "myNum = " &lt;&lt; myNum &lt;&lt;endl; return 0;&#125;预处理12345678910111213&#123;% note primary %&#125;预处理主要完成的工作有：（1）删除#define，展开宏；（2）处理条件编译指令，预处理程序先判断条件，在根据条件修改源代码；（3）删除注释；（4）添加行号，以及文件名标识，便于调试（5）删除“#include”，插入相应的头文件；&#123;% endnote %&#125;使用下面的命令，得到预处理后的文件test.i1g++ -E test.cpp -o test.i查看test.i文件编译使用下面的代码生成汇编文件test.s1g++ -S test.i -o test.s123&#123;% note info %&#125;注意：直接从test.cpp文件得到汇编文件也可以。直接使用命令 g++ -S test.cpp -o test.s&#123;% endnote %&#125;查看test.s文件汇编使用下面的命令将汇编指令转化为机器指令，生成文件test.o1g++ -c test.s -o test.o查看文件test.o链接通过链接库文件，可以将目标文件test.o转化为可执行文件test.exe123&#123;% note info %&#125;注意:Windows下可执行文件的后缀为exe，而Linux下不需要后缀。&#123;% endnote %&#125;CMD输入以下代码1g++ test.o -o test.exe注意:Windows下.o文件已经可以执行，在命令行输入test.o就可以看到如下的效果：另外一个命令是1g++ test.o -o test.exe -L 所需库文件路径123&#123;% note primary %&#125;其中L为link的缩写。&#123;% endnote %&#125;快速生成可执行文件一般情况下，可以直接使用g++ test.cpp -o test 就可以生成可执行程序了。运行程序如下：MinGW + SublimeText配置C++环境下载MinGW和SublimeTextSublimeText下载MinGW下载及相关配置使用SublimeText因为前面配置好环境变量了，所以可以直接在SublimeText下编译运行程序Tools-&gt;build(或者按快捷键Ctrl+B 或 Ctrl + Shift + B).png)可以在最下面一栏看到输出结果enjoy it!]]></content>
      <tags>
        <tag>C++</tag>
        <tag>MinGW</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置基于Github的PicGo图床]]></title>
    <url>%2Fposts%2Fded73fd3.html</url>
    <content type="text"><![CDATA[PicGo介绍PicGo是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub等图床在Github创建图床创建Repository生成一个Token用于操作GitHub repository步骤如下:注：创建成功后，会生成一串token，这串token之后不会再显示，所以第一次看到的时候，就要好好保存配置PicGo下载PicGoWindows用户下载exe文件配置图床设定仓库名的时候，是按照“账户名/仓库名的格式填写”分支名统一填写“master”将之前的Token黏贴在这里存储的路径可以按照我这样子写，就会在repository下创建一个“img”文件夹自定义域名的作用是，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上https://raw.githubusercontent.com/用户名/RepositoryName/分支名，，自定义域名需要按照这样去填写快捷键及相关配置这里配置上传快捷键为ctrl+shift+c使用经过上面的配置就大功告成了，每次截图之后，只需要ctrl+shift+c一下就可以把剪切板上面的截图转化为在线网络图片链接。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows下gcc的安装和使用]]></title>
    <url>%2Fposts%2Fa7c21fc4.html</url>
    <content type="text"><![CDATA[写在源文件中的源代码是人类可读的源。它需要”编译”，转为机器语言，这样 CPU 可以按给定指令执行程序。C 语言编译器用于把源代码编译成最终的可执行程序。安装首先,到：https://sourceforge.net/projects/mingw-w64/files/latest/download，下载最新版本的 MinGW 安装程然后，运行 Download mingw-get-setup.exe ,点击”运行”，continue等，注意记住安装的目录，之后需要配置环境变量，例如D:\MinGW\bin假如网速不好，可以通过下面的链接进行离线下载，下载完成之后使用7Zip解压，然后把解压的文件移动到安装路径即可。https://pan.baidu.com/s/1W4fHsUeaw1C9vp1lvRygbw注：使用这种方式下面的步骤不需要执行了，已经在离线包中集成了。可直接输入gcc -v查看gcc版本。验证安装：在开始菜单中，点击”运行”，输入 cmd,打开命令行:输入 mingw-get,如果弹出 MinGw installation manager 窗口，说明安装正常，然后关闭窗口。安装GCC等编译器在cmd中输入如下命令进行安装：安装gcc1mingw-get install gcc安装g++1mingw-get install g++安装gdb1mingw-get install gdb使用在桌面创建一个hello.c的程序123456789#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; "Hello!" &lt;&lt; endl; return 0;&#125;在 cmd 中输入命令1gcc hello.c在当前目录下(记住是命令的当前目录)会生成 a.exe 的可执行文件，在 cmd 中输入 a.exe 就可以执行程序了。]]></content>
      <tags>
        <tag>C++</tag>
        <tag>MinGW</tag>
        <tag>编译</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式-括号的区别]]></title>
    <url>%2Fposts%2F5c9fc645.html</url>
    <content type="text"><![CDATA[正则表达式(括号)、[中括号]、{大括号}的区别小结()() 是为了提取匹配的字符串。表达式中有几个()就有几个相应的匹配字符串。例如：(\s*)表示连续空格的字符串。[][]是定义匹配的字符范围。例如：[a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s]表示空格或者号。{}{}一般用来表示匹配的长度.例如：\s{3} 表示匹配三个空格，\s{1,3}表示匹配一到三个空格。拓展(0-9) 匹配 ‘0-9′ 本身。 [0-9] 匹配数字（注意后面有 ，可以为空）[0-9]+ 匹配数字（注意后面有 +，不可以为空）{1-9} 写法错误。[0-9]{0,9} 表示长度为 0 到 9 的数字字符串。ONE圆括号()是组，主要应用在限制多选结构的范围/分组/捕获文本/环视/特殊模式处理示例：1、(abc|bcd|cde)，表示这一段是abc、bcd、cde三者之一均可，顺序也必须一致2、(abc)?，表示这一组要么一起出现，要么不出现，出现则按此组内的顺序出现3、(?:abc)表示找到这样abc这样一组，但不记录，不保存到$变量中，否则可以通过$x取第几个括号所匹配到的项，比如：(aaa)(bbb)(ccc)(?:ddd)(eee)，可以用$1获取(aaa)匹配到的内容，而$3则获取到了(ccc)匹配到的内容，而$4则获取的是由(eee)匹配到的内容，因为前一对括号没有保存变量4、a(?=bbb) 顺序环视 表示a后面必须紧跟3个连续的b5、(?i:xxxx) 不区分大小写 (?s:.*) 跨行匹配.可以匹配回车符方括号是单个匹配，字符集/排除字符集/命名字符集示例：1、[0-3]，表示找到这一个位置上的字符只能是0到3这四个数字，与(abc|bcd|cde)的作用比较类似，但圆括号可以匹配多个连续的字符，而一对方括号只能匹配单个字符2、[^0-3]，表示找到这一个位置上的字符只能是除了0到3之外的所有字符3、[:digit:] 0-9 [:alnum:] A-Za-z0-9TWO()和[]有本质的区别()内的内容表示的是一个子表达式，()本身不匹配任何东西，也不限制匹配任何东西，只是把括号内的内容作为同一个表达式来处理，例如(ab){1,3}，就表示ab一起连续出现最少1次，最多3次。如果没有括号的话，ab{1,3},就表示a，后面紧跟的b出现最少1次，最多3次。另外，括号在匹配模式中也很重要。这个就不延伸了，LZ有兴趣可以自己查查[]表示匹配的字符在[]中，并且只能出现一次，并且特殊字符写在[]会被当成普通字符来匹配。例如[(a)]，会匹配(、a、)、这三个字符。所以() [] 无论是作用还是表示的含义，都有天壤之别，没什么联系test]]></content>
      <tags>
        <tag>pathon</tag>
        <tag>正则表达式</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-格式排版]]></title>
    <url>%2Fposts%2Fc9786415.html</url>
    <content type="text"><![CDATA[Markdown内图片并排居中代码如下：12345&lt;center class="half"&gt;&lt;img src="/686e3a13ly1gb1zr3g5oyj20p00e2q56.jpg" width="200"/&gt;&lt;img src="/686e3a13ly1gb1zr3g5oyj20p00e2q56.jpg" width="200"/&gt;&lt;img src="/686e3a13ly1gb1zr3g5oyj20p00e2q56.jpg" width="200"/&gt;&lt;/center&gt;在Markdown编辑器下可以看到如下的效果：转化为网页的效果如下(没有并排了，也就是说只在md文件中适合)：使用table关键字代码如下：1234567891011121314&lt;table&gt; &lt;tr&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图1 test1 &lt;/center&gt;&lt;/td&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图2 test2 &lt;/center&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图3 test3 &lt;/center&gt;&lt;/td&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图4 test4 &lt;/center&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图5 test5 &lt;/center&gt;&lt;/td&gt; &lt;td &gt;&lt;center&gt;&lt;img src="https://raw.githubusercontent.com/wujiahong1998/PicGoBed/master/img/4eabb0e7182a79f97f6b0f795cc3e685.jpg" &gt;图6 test6 &lt;/center&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;实现效果如下：图1 test1图2 test2图3 test3图4 test4图5 test5图6 test6]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown-插入视频]]></title>
    <url>%2Fposts%2Ffad863f5.html</url>
    <content type="text"><![CDATA[插入视频传统方法使用iframe1&lt;iframe height=498 width=510 src="视频地址"&gt;无边界设置1&lt;iframe height=498 width=510 src="视频地址" frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;1) 直接用 HTML 的标签，写法如下：1&lt;video poster="https://封面图.jpg" src="https://什么什么什么.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta"&gt;Your browser does not support the video tag.&lt;/video&gt;Your browser does not support the video tag.2) 用插件，可支持弹幕，首先在站点文件夹根目录安装插件:1npm install hexo-tag-dplayer --save文章中的写法:1&#123;% dplayer "url=https://什么什么什么.mp4" "https://封面图.jpg" "api=https://api.prprpr.me/dplayer/" "id=" "loop=false" %&#125;!function(){var e=new DPlayer({container:document.getElementById("dplayer0"),video:{url:"http://f.us.sinaimg.cn/002PQ9GSlx07llR5Zaty01040200ImHx0k010.mp4?label=mp4_720p&template=1280x720.28&Expires=1579766541&ssig=2E%2F1JMw%2B1v&KID=unistore,video"},danmaku:{api:"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]),window.dplayers.push(e)}()插入音乐1）直接使用HTML的标签1&lt;audio src="https://什么什么什么.mp3" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta"&gt;Your browser does not support the audio tag.&lt;/audio&gt;Your browser does not support the audio tag.2) 用插件hexo-tag-aplayer1npm install hexo-tag-aplayer --save写法：1&#123;% aplayer "歌曲名" "歌手名" "https://什么什么什么.mp3" "https://封面图.jpg" "lrc:https://歌词.lrc" %&#125;支持歌单：1234567891011121314151617181920212223&#123;% aplayerlist %&#125;&#123; "autoplay": false, "showlrc": 3, "mutex": true, "music": [ &#123; "title": "歌曲名", "author": "歌手名", "url": "https://什么什么什么.mp3", "pic": "https://封面图.jpg", "lrc": "https://歌词.lrc" &#125;, &#123; "title": "歌曲名", "author": "歌手名", "url": "https://什么什么什么.mp3", "pic": "https://封面图.jpg", "lrc": "https://歌词.lrc" &#125; ]&#125;&#123;% endaplayerlist %&#125;var ap=new APlayer({element:document.getElementById("aplayer-QcljEzEb"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"Fugitive",author:"Tebey",url:"/Tebey - Fugitive.mp3",pic:"http://p1.music.126.net/dPbXQnI5QPfSWuh5NIW1Cw==/45079976751932.jpg?param=130y130",lrc:"https://歌词.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫-动态渲染页面爬取]]></title>
    <url>%2Fposts%2F6486ae93.html</url>
    <content type="text"><![CDATA[前一次学习了Ajax的分析及抓取，这其实也是JS动态渲染的页面的一种。但是JS动态渲染的页面不止Ajax这一种。为了实现能够爬取所有的动态渲染页面，我们可以直接使用模拟浏览器运行的方式来实现。这样就能做到所见即可爬。首先第一个能够模拟浏览器运行的库就是Selenium，安装配置的方式可以参照下面的博文：Selenium的安装ChromeDriver的安装]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ajax数据爬取]]></title>
    <url>%2Fposts%2F2815b369.html</url>
    <content type="text"><![CDATA[有时候我们在使用requests抓取页面的时候，得到的结果可能和在浏览器中看到的不一样，也就是说可能request请求并不能请求到所有的数据。真正的原因是reques获取的都是原始的HTML文档，而浏览器中的页面是经过JS处理数据后生成的结果。其中数据的来源有如下几种：通过Ajax加载包含在HTML文档中经过JS和特定算法计算后生成对于第一种情况，数据加载是一种异步加载方式，原始得到页面最初不会包含某些数据，原始页面加载完后，会再向服务器请求某个接口获取数据，然后数据才被处理呈现到网页上，这其实就是发送了一个Ajax请求。所以遇到这样的页面，直接利用requests等库来抓Ajax取页面，是无法获取有效数据的。这时需要分析网页后台接口发送的Ajax请求，如果可以用requests来模拟Ajax请求，那么就能成功抓取了。What is Ajax？Ajax全称为Asynchronous JavaScript and XML，即异步的 JavaScript 和 XML。AJAX = 异步 JavaScript 和 XML。Ajax不是一门编程语言，而是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。实例浏览网页的时候，我们会发现很多网页都有下滑查看更多的选项，就比如微博。我们注意到页面其实没有整个刷新，也就意味着页面的链接没有变化，而网页中多出来的新内容是后面Ajax请求获取的数据。基本原理发送Ajax请求到网页更新这个过程可以分成三步：发送请求解析内容渲染网页Ajax分析方法使用Chrome的开发者工具，在选项栏中选择Network选项卡，然后刷新页面，并且可以选择XHR过滤(Ajax有其特殊的请求类型，就是XHR)，如下：由上图右侧可以看到请求头的一些信息，其中有一个信息为X-Requested-With: XMLHttpRequest，这就标记了此请求为Ajax请求。点击一下Preview，可以看到响应的内容，它是JSON格式的。可以看到返回结果是博主的个人信息，如昵称、简介和头像等等切换到Response选项卡，从中可以观察到真实的返回数据差别不大~Ajax结果提取分析请求选择其中一个getIndex请求，分析它的参数。可以看到请求的参数有三个，分别是type、value、containerid，还有一个page参数是隐藏起来了，总共四个参数。通过分析可知，其中前三个参数都维持不变，在下滑拉动时改变的参数只有page。分析响应响应内容是JSON格式的，主要分为两部分，一部分信息是cardlistInfo，另一部分是cards。cardlistInfo包含比较重要的信息total，里面有包含微博的总数量，可以根据这个来估计分页数；cards则是一个列表，包含10个微博元素。实战爬取微博数据首先模拟Ajax获取微博第一页的数据导入必要的包1234import requestsimport jsonfrom urllib.parse import urlencodeimport re爬取JSON数据12345678910111213141516base_url = 'https://m.weibo.cn/api/container/getIndex?'params = &#123; 'type': 'uid', 'value': '1752054291', 'containerid': '1076031752054291', 'page':1&#125;headers = &#123; 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36', 'Host':'m.weibo.cn', 'Referer':'https://m.weibo.cn/u/1752054291', 'X-Requested-With': 'XMLHttpRequest'&#125;url = base_url + urlencode(params)r = requests.get(url,headers)r处理JSON数据可以使用下面的命令将得到的网页数据转化为JSON数据：1r.json()也可以使用loads()方法将JSON文本字符串转化为JSON对象1data = json.loads(r.text)使用dumps()方法将JSON数据转化为文本字符串。1text = json.dumps(data)写入JSON文件，首先转为字符串格式再写入12345j_data = r.json()type(j_data)with open('data.json','w',encoding='utf-8') as f: f.write(json.dumps(j_data,indent=2,ensure_ascii=False)) print("ok!")其中indent参数是缩进字符个数，为了保存JSON格式；而encoding与ensure_ascii参数是实现中文编码的写入。实战爬取数据首先导入必要的包123456import requestsimport jsonfrom urllib.parse import urlencodeimport reimport timefrom pyquery import PyQuery as pq设置基准网址以及headers1234567base_url = 'https://m.weibo.cn/api/container/getIndex?'headers = &#123; 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36', 'Host':'m.weibo.cn', 'Referer':'https://m.weibo.cn/u/1752054291', 'X-Requested-With': 'XMLHttpRequest'&#125;设置参数测试一下返回结果，ok！123456789params = &#123; 'type': 'uid', 'value': '1752054291', 'containerid': '1076031752054291', 'page':1&#125;url = base_url + urlencode(params)r = requests.get(url,headers)r&lt;Response [200]&gt; 定义获取JSON数据的函数1234567891011121314def get_data(index): params = &#123; 'type': 'uid', 'value': '1752054291', 'containerid': '1076031752054291', 'page':index &#125; url = base_url + urlencode(params) try: r = requests.get(url,headers) if r.status_code == 200: return r.json() except requests.ConnectionError as e: print("error",e.args)定义处理JSON数据并且返回迭代器的函数123456789101112131415def parse_data(j_data): if j_data: its = j_data.get('data').get('cards') for it in its: if it.get('card_type') != 9: continue it = it.get('mblog') weibo = &#123;&#125; weibo['id'] = it.get('id') weibo['text'] = pq(it.get('text')).text() weibo['reposts'] = it.get('reposts_count') weibo['comments'] = it.get('comments_count') weibo['attitudes'] = it.get('attitudes_count') weibo['pic'] = it.get('original_pic') yield weibo定义写文件的函数12345678def write_data(weibos,index): with open("weibo.md",'a+',encoding='utf-8') as f: f.write('# 第%d页\n' % index) for x in weibos: f.write(x['text']+'\n') f.write('点赞数:'+str(x['attitudes'])+' 转发数:'+str(x['reposts'])+ ' 评论数:'+str(x['comments'])+'\n') f.write('![](%s)\n\n' % x['pic']) print('page %d write ok!' % index)设置爬取的最新微博的页数并且开始爬取123456page_num = 10for index in range(1,page_num): j_data = get_data(index) result = parse_data(j_data) write_data(result,index) time.sleep(2)page 1 write ok! page 2 write ok! page 3 write ok! page 4 write ok! page 5 write ok! page 6 write ok! page 7 write ok! page 8 write ok! page 9 write ok! 查看markdown文件最终结果：]]></content>
      <tags>
        <tag>Ajax</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫——Requests与Re]]></title>
    <url>%2Fposts%2F2e84c07.html</url>
    <content type="text"><![CDATA[Requsests抓取知乎发现网页123456import requestsheaders = &#123; 'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'&#125;r = requests.get("https://www.zhihu.com/explore",headers=headers)r.text得到返回结果如下：1&lt;!doctype html&gt;\n&lt;html lang=&quot;zh&quot; data-hairline=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;head&gt;&lt;meta charSet=&quot;utf-8&quot;/&gt;&lt;title data-react-helmet=&quot;true&quot;&gt;发现 - 知乎&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1&quot;/&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;/&gt;&lt;meta name=&quot;force-rendering&quot; content=&quot;webkit&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;FTeR0c8arOPKh8c5DYh_9uu98_zJbaWw53J-Sch9MTg&quot;/&gt;&lt;meta name=&quot;description&quot; property=&quot;og:description&quot; content=&quot;有问题，上知乎。知乎，可信赖的问答社区，以让每个人高效获得可信赖的解答为使命。知乎凭借认真、专业和友善的社区氛围，结构化、易获得的优质内容，基于问答的内容生产方式和独特的社区机制，吸引、聚集了各行各业中大量的亲历者、内行人、领域专家、领域爱好者，将高质量的内容透过人的节点来成规模地生产和分享。用户通过问答等交流方式建立信任和连接，打造和提升个人影响力，并发现、获得新机会。&quot;/&gt;&lt;link data-react-helmet=&quot;true&quot; rel=&quot;apple-touch-icon&quot; href=&quot;https://static.zhihu.com/heifetz/assets/apple-touch-icon-152.67c7b278.png&quot;/&gt;&lt;link data-react-helmet=&quot;true&quot; rel=&quot;apple-touch-icon&quot; ......抓取二进制数据使用r.content,抓取图片、视频、音频可以使用获取类型和响应码以及Cookies1type(r),r.status_code,r.cookies结果如下：1&lt;RequestsCookieJar[Cookie(version=0, name=&apos;_xsrf&apos;, value=&apos;f2dbbb2e-5469-4833-84f8-4688ff5f83ca&apos;, port=None, port_specified=False, domain=&apos;.zhihu.com&apos;, domain_specified=True, domain_initial_dot=True, path=&apos;/&apos;, path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest=&#123;&#125;, rfc2109=False), Cookie(version=0, name=&apos;_zap&apos;, value=&apos;974b884d-3096-4ef7-9db3-7c2d4fa696d2&apos;, port=None, port_specified=False, domain=&apos;.zhihu.com&apos;, domain_specified=True, domain_initial_dot=True, path=&apos;/&apos;, path_specified=True, secure=False, expires=1642430123, discard=False, comment=None, comment_url=None, rest=&#123;&#125;, rfc2109=False), Cookie(version=0, name=&apos;d_c0&apos;, value=&apos;&quot;AMBVgMhYrhCPTu83spKpYHKIPpSmGhs2vYM=|1579358123&quot;&apos;, port=None, port_specified=False, domain=&apos;.zhihu.com&apos;, domain_specified=True, domain_initial_dot=False, path=&apos;/&apos;, path_specified=True, secure=False, expires=1673966123, discard=False, comment=None, comment_url=None, rest=&#123;&#125;, rfc2109=False), Cookie(version=0, name=&apos;KLBRSID&apos;, value=&apos;d6f775bb0765885473b0cba3a5fa9c12|1579358123|1579358123&apos;, port=None, port_specified=False, domain=&apos;www.zhihu.com&apos;, domain_specified=False, domain_initial_dot=False, path=&apos;/&apos;, path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest=&#123;&#125;, rfc2109=False)]&gt;)其中，对知乎该页面进行抓取，如果不加headers，则会被禁止抓取。headers还可以加上host等信息。具体的headers可以在Chrome中的开发者工具中查看。Requests高级用法文件上传使用requests提交文件数据与提交表单的方式一样，使用POST1234import requestsfiles = &#123;'file':open('../test.html','rb')&#125;r = requests.post("http://httpbin.org/post",files=files)print(r.text)结果返回：12345678910111213141516171819&#123; &quot;args&quot;: &#123;&#125;, &quot;data&quot;: &quot;&quot;, &quot;files&quot;: &#123; &quot;file&quot;: &quot;&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;XXX&quot; &#125;, &quot;form&quot;: &#123;&#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Content-Length&quot;: &quot;183&quot;, &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=c48f0acf59b0bbbb2bfb85123fc1e9a8&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;python-requests/2.22.0&quot; &#125;, &quot;json&quot;: null, &quot;origin&quot;: &quot;119.138.12.7, 119.138.12.7&quot;, &quot;url&quot;: &quot;https://httpbin.org/post&quot;&#125;注意此时form是空的，而file不空。Cookies维持登陆首先登陆知乎，将headers中的Cookie内容复制下来使用python设置带cookie的headers进行网页的爬取12345678import requestsheaders = &#123; 'user-agent':'Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14', 'Cookie':'_zap=0e494486-7b1d-49c1-b422-8ca12cb78a64; d_c0="AFAY8PstpBCPTjY_QcAZsYq5pzbozU3oicQ=|1578675815"; _xsrf=tGkekz1w7jqgQXIM728Wh5UAyzNma6q8; capsion_ticket="2|1:0|10:1579361278|14:capsion_ticket|44:YjdkYTI0YzhjY2FkNDU4YTgyOTc5M2NkZDhhMjlkMWU=|5c65b00f851c15e4db0b785174ec44edb7a39dbb263d5020fb2ce4f5ad7cd0f8"; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1579154350,1579190501,1579356116,1579361278; l_n_c=1; r_cap_id="OTY1ZGU0NzM5OTUzNDczN2IzNWQ2NWY3YmI5MDBjZjA=|1579361280|8b01bbdb53a45bf7eaaa63d89515d99f20fbbaff"; cap_id="ODU1ZjgzZTI5YTRiNDAwZmIyZTNmY2NmN2JiMDgyMWM=|1579361280|d58acd5ba32aa92cec6cc46974cbe504e1e358e8"; l_cap_id="ZDNmOGQ4YTZiMWQ2NDU2ZDhmNGM5YzY2NThiMzNjYjk=|1579361280|cf77e41085a601d9b41267ba12ed01309d60b506"; n_c=1; z_c0=Mi4xY1ctTEFnQUFBQUFBVUJqdy15MmtFQmNBQUFCaEFsVk5EbklRWHdBeUUwQjNpcmlpUC02MDhUSWtVQkRFTXl1cXN3|1579361294|ef64ed49cd12b4ce9a1c51920bbc68e20a5b7a95; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1579361297; tst=r; KLBRSID=9d75f80756f65c61b0a50d80b4ca9b13|1579361297|1579356114', 'Host':'www.zhihu.com'&#125;r = requests.get("https://www.zhihu.com",headers=headers)print(r.text)通过以上的代码就能够返回知乎首页的网页数据了。会话维持使用Session对象维持会话，又访问一个页面时相当于打开一个新的选项卡而不是一个新的浏览器页面123456789101112import requestsheaders = &#123; 'user-agent':'Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14', 'Cookie':'_zap=0e494486-7b1d-49c1-b422-8ca12cb78a64; d_c0="AFAY8PstpBCPTjY_QcAZsYq5pzbozU3oicQ=|1578675815"; _xsrf=tGkekz1w7jqgQXIM728Wh5UAyzNma6q8; capsion_ticket="2|1:0|10:1579361278|14:capsion_ticket|44:YjdkYTI0YzhjY2FkNDU4YTgyOTc5M2NkZDhhMjlkMWU=|5c65b00f851c15e4db0b785174ec44edb7a39dbb263d5020fb2ce4f5ad7cd0f8"; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1579154350,1579190501,1579356116,1579361278; l_n_c=1; r_cap_id="OTY1ZGU0NzM5OTUzNDczN2IzNWQ2NWY3YmI5MDBjZjA=|1579361280|8b01bbdb53a45bf7eaaa63d89515d99f20fbbaff"; cap_id="ODU1ZjgzZTI5YTRiNDAwZmIyZTNmY2NmN2JiMDgyMWM=|1579361280|d58acd5ba32aa92cec6cc46974cbe504e1e358e8"; l_cap_id="ZDNmOGQ4YTZiMWQ2NDU2ZDhmNGM5YzY2NThiMzNjYjk=|1579361280|cf77e41085a601d9b41267ba12ed01309d60b506"; n_c=1; z_c0=Mi4xY1ctTEFnQUFBQUFBVUJqdy15MmtFQmNBQUFCaEFsVk5EbklRWHdBeUUwQjNpcmlpUC02MDhUSWtVQkRFTXl1cXN3|1579361294|ef64ed49cd12b4ce9a1c51920bbc68e20a5b7a95; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1579361297; tst=r; KLBRSID=9d75f80756f65c61b0a50d80b4ca9b13|1579361297|1579356114', 'Host':'www.zhihu.com'&#125;s = requests.Session() #使用Session对象r1 = s.get("https://www.zhihu.com/explore",headers=headers)r2 = s.get("https://www.zhihu.com/explore",headers=headers)if(r1.cookies == r2.cookies): print("yes!")输出如下：1yes!Session通常用于模拟登陆成功后再进行下一步的操作SSL证书验证如果我们想跳过刚才 12306 的证书验证，把 verify 设置为 False 即可(虽然现在12306的证书已经支持了)。1234import requestsr = requests.get('https://kyfw.12306.cn/otn/', verify=False)print r.text在默认情况下 verify 是 True，所以如果需要的话，需要手动设置下这个变量。身份认证使用requests自带的身份认证功能Re正则表达式 直观认识正则表达式测试工具使用上面的正则表达式工具可以匹配一些特有的数据。 再看看匹配规则模式描述^匹配字符串的开头$匹配字符串的末尾。.匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。[…]用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’[^…]不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。re*匹配0个或多个的表达式。re+匹配1个或多个的表达式。re?匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式re{ n}精确匹配 n 个前面表达式。例如， o{2} 不能匹配 “Bob” 中的 “o”，但是能匹配 “food” 中的两个 o。re{ n,}匹配 n 个前面表达式。例如， o{2,} 不能匹配”Bob”中的”o”，但能匹配 “foooood”中的所有 o。”o{1,}” 等价于 “o+”。”o{0,}” 则等价于 “o*”。re{ n, m}匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式a\b匹配a或b(re)对正则表达式分组并记住匹配的文本(?imx)正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。(?-imx)正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。(?: re)类似 (…), 但是不表示一个组(?imx: re)在括号中使用i, m, 或 x 可选标志(?-imx: re)在括号中不使用i, m, 或 x 可选标志(?#…)注释.(?= re)前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。(?! re)前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功(?&gt; re)匹配的独立模式，省去回溯。\w匹配字母数字及下划线\W匹配非字母数字及下划线\s匹配任意空白字符，等价于 [\t\n\r\f].\S匹配任意非空字符\d匹配任意数字，等价于 [0-9].\D匹配任意非数字\A匹配字符串开始\Z匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。\z匹配字符串结束\G匹配最后匹配完成的位置。\b匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。\B匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。\n, \t, 等.匹配一个换行符。匹配一个制表符。等\1…\9匹配第n个分组的内容。\10匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。函数与方法match()在match()方法中，第一个参数传入正则表达式，第二个参数是要匹配的字符串，并且match()方法会从字符串的起始位置进行匹配，不匹配就返回None，匹配返回的结果是一个re.Match对象。例如下面的文本1My Phone number is 17318062050,and my email is 1427298682@qq.com.使用正则表达式\d{11}匹配11位数字的手机号码12345import retext = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '\d&#123;11&#125;'result = re.search(regex,text)print(result)返回的结果为None，因为是从字符串的起始位置匹配1None假若使用正则表达式^.*?\d{11}进行从开头匹配，可以得到返回结果不为None1234567import retext = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '^.*?\d&#123;11&#125;'result = re.match(regex,text)print(result) # 匹配的对象print(result.group()) # 输出匹配的内容print(result.span()) # 输出匹配的范围结果如下：123&lt;re.Match object; span=(0, 30), match=&apos;My Phone number is 17318062050&apos;&gt;My Phone number is 17318062050(0, 30)匹配目标可以使用()括号将想要提取的子字符串括起来，然后调用group()方法传入分组的索引即可提取结果。索引为0是匹配的总字符串，其他分组索引从1开始。1234text = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '^.*?(\d&#123;11&#125;)'result = re.match(regex,text)print(result.group(1))使用括号匹配11位手机号码117318062050通用匹配假如像前面那样，出现空白字符就用\s匹配，出现字母或者下划线就用\w,出现数字就用\d,这样的工作量非常大。其实，还有一个更加方便的方法可以使用，那就是.*(点星)。其中.(点)可以匹配任意字符串(除换行符)，*(星)代表匹配前面的字符无限次，所以合在一起就可以匹配任意的字符了。贪婪与非贪婪.*是贪婪，.*?是非贪婪。search()search()方法可以不从字符串的起始位置开始匹配，只要找到匹配的就返回结果，如果不存在字串匹配的话就返回None。12345import retext = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '\d&#123;11&#125;'result = re.search(regex,text)print(result)1&lt;re.Match object; span=(19, 30), match=&apos;17318062050&apos;&gt;findall()可以查找一个字符串里面所有匹配的正则表达式，特点可以匹配多个，不止一个。sub()可以进行字串的替换。例如下面将电话号码替换成None12345import retext = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '\d&#123;11&#125;'r = re.sub(regex,'None',text)print(r)1My Phone number is None,and my email is 1427298682@qq.com.compile()使用该方法可以生成一个正则表达式对象。123456import retext = "My Phone number is 17318062050,and my email is 1427298682@qq.com."regex = '\d&#123;11&#125;'pattern = re.compile(regex) #生成一个正则表达式对象result = re.search(pattern,text)print(result)1&lt;re.Match object; span=(19, 30), match=&apos;17318062050&apos;&gt;爬取知乎发现页面的四个专题Title分析页面使用开发者工具，选择Elements元素，将鼠标放置在Title上可以发现下面的文档对应上面的显示编写正则表达式通过上面对页面进行的分析，则很容易可以写出匹配四个专题的title的正则表达式，如下：1regex = '&lt;a.*?ExploreSpecialCard-title.*?&gt;(.*?)&lt;/a&gt;'开始爬取编写完正则表达式之后，就可以使用requests先爬取整个页面，然后使用Re解析整个页面，最后得到需要的数据。1234567891011import requestsimport reheaders = &#123; 'User-Agent':'Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14'&#125;url = 'https://www.zhihu.com/explore'r = requests.get(url,headers=headers)regex = '&lt;a.*?ExploreSpecialCard-title.*?&gt;(.*?)&lt;/a&gt;'result = re.findall(regex,r.text,re.S)for i in range(0,len(result)): print(i+1 ,":"+result[i].strip())12341 :新型冠状病毒肺炎预防术2 :有哪些特别好看的壁纸？3 :「知识」无法「劝退」4 :好奇星人 · 十二生肖（下）爬取人人影视时下热门12import requestsimport re设置请求头和url12345url = 'http://www.zmz2019.com/'headers = &#123; 'User-Agent':'Opera/9.80 (Windows NT 6.0) Presto/2.12.388 Version/12.14'&#125;获取整个网页文档123r = requests.get(url,headers=headers)r.encoding = 'utf-8'r.text保存网页文档1text = r.text编写正则表达式进行过滤123regex = '&lt;div class="box clearfix"&gt;.*?&lt;ul&gt;(.*?)&lt;/ul&gt;.*?&lt;/div&gt;'result = re.search(regex,r.text,re.S)result.group(1)&apos;\n &lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;1&lt;/span&gt;&lt;a href=&quot;/resource/39382&quot; title=&quot;阿基米德大战&quot;&gt;阿基米德大战&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li class=&quot;top&quot;&gt;--&gt;\n&lt;!-- &lt;span&gt;1&lt;/span&gt;--&gt;\n&lt;!-- &lt;div class=&quot;fl-img&quot;&gt;--&gt;\n&lt;!-- &lt;a href=&quot;/resource/39382&quot; title=&quot;阿基米德大战&quot;&gt;&lt;img src=&quot;http://tu.jstucdn.com/ftp/2020/0118/s_aa1a4595c746e2013dc398464c876289.jpg&quot; /&gt;&lt;/a&gt;--&gt;\n&lt;!-- &lt;/div&gt;--&gt;\n&lt;!-- &lt;div class=&quot;fl-info&quot;&gt;--&gt;\n&lt;!-- &lt;a href=&quot;/resource/39382&quot;&gt;阿基米德大战&lt;/a&gt;--&gt;\n&lt;!-- &lt;p&gt;电影&lt;/p&gt;--&gt;\n&lt;!-- &lt;p&gt;2019&lt;/p&gt;--&gt;\n&lt;!-- &lt;/div&gt;--&gt;\n&lt;!-- &lt;/li&gt;--&gt;\n&lt;!-- --&gt;&lt;li&gt;&lt;em&gt;英剧&lt;/em&gt;&lt;span&gt;2&lt;/span&gt;&lt;a href=&quot;/resource/37449&quot; title=&quot;性教育&quot;&gt;性教育&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;英剧&lt;/em&gt;&lt;span&gt;2&lt;/span&gt;&lt;a href=&quot;/resource/37449&quot; title=&quot;性教育&quot;&gt;性教育&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;3&lt;/span&gt;&lt;a href=&quot;/resource/39348&quot; title=&quot;局外人&quot;&gt;局外人&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;3&lt;/span&gt;&lt;a href=&quot;/resource/39348&quot; title=&quot;局外人&quot;&gt;局外人&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;4&lt;/span&gt;&lt;a href=&quot;/resource/38580&quot; title=&quot;终结者：黑暗命运&quot;&gt;终结者：黑暗命运&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;4&lt;/span&gt;&lt;a href=&quot;/resource/38580&quot; title=&quot;终结者：黑暗命运&quot;&gt;终结者：黑暗命运&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;5&lt;/span&gt;&lt;a href=&quot;/resource/39370&quot; title=&quot;丧钟：骑士与龙&quot;&gt;丧钟：骑士与龙&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;5&lt;/span&gt;&lt;a href=&quot;/resource/39370&quot; title=&quot;丧钟：骑士与龙&quot;&gt;丧钟：骑士与龙&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;6&lt;/span&gt;&lt;a href=&quot;/resource/39394&quot; title=&quot;忒修斯之船&quot;&gt;忒修斯之船&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;6&lt;/span&gt;&lt;a href=&quot;/resource/39394&quot; title=&quot;忒修斯之船&quot;&gt;忒修斯之船&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;7&lt;/span&gt;&lt;a href=&quot;/resource/39392&quot; title=&quot;这个男人是我人生最大的错误&quot;&gt;这个男人是我人生最大的错误&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;7&lt;/span&gt;&lt;a href=&quot;/resource/39392&quot; title=&quot;这个男人是我人生最大的错误&quot;&gt;这个男人是我人生最大的错误&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;8&lt;/span&gt;&lt;a href=&quot;/resource/39381&quot; title=&quot;猎龙飞船&quot;&gt;猎龙飞船&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;8&lt;/span&gt;&lt;a href=&quot;/resource/39381&quot; title=&quot;猎龙飞船&quot;&gt;猎龙飞船&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;9&lt;/span&gt;&lt;a href=&quot;/resource/35493&quot; title=&quot;良医&quot;&gt;良医&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;9&lt;/span&gt;&lt;a href=&quot;/resource/35493&quot; title=&quot;良医&quot;&gt;良医&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;10&lt;/span&gt;&lt;a href=&quot;/resource/39321&quot; title=&quot;掠夺者&quot;&gt;掠夺者&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;10&lt;/span&gt;&lt;a href=&quot;/resource/39321&quot; title=&quot;掠夺者&quot;&gt;掠夺者&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;11&lt;/span&gt;&lt;a href=&quot;/resource/39339&quot; title=&quot;小美国&quot;&gt;小美国&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;11&lt;/span&gt;&lt;a href=&quot;/resource/39339&quot; title=&quot;小美国&quot;&gt;小美国&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;12&lt;/span&gt;&lt;a href=&quot;/resource/10760&quot; title=&quot;无耻家庭&quot;&gt;无耻家庭&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;12&lt;/span&gt;&lt;a href=&quot;/resource/10760&quot; title=&quot;无耻家庭&quot;&gt;无耻家庭&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt;&lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;13&lt;/span&gt;&lt;a href=&quot;/resource/39325&quot; title=&quot;倒忌时&quot;&gt;倒忌时&lt;/a&gt;&lt;/li&gt;\n&lt;!-- --&gt;\n&lt;!-- &lt;li&gt;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;13&lt;/span&gt;&lt;a href=&quot;/resource/39325&quot; title=&quot;倒忌时&quot;&gt;倒忌时&lt;/a&gt;&lt;/li&gt;--&gt;\n&lt;!----&gt; &apos; 123regex = '&lt;li&gt;(.*?)&lt;/li&gt;'result = re.findall(regex,result.group(),re.S)result[&apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;1&lt;/span&gt;&lt;a href=&quot;/resource/39382&quot; title=&quot;阿基米德大战&quot;&gt;阿基米德大战&lt;/a&gt;&apos;, &apos;&lt;em&gt;英剧&lt;/em&gt;&lt;span&gt;2&lt;/span&gt;&lt;a href=&quot;/resource/37449&quot; title=&quot;性教育&quot;&gt;性教育&lt;/a&gt;&apos;, &apos;&lt;em&gt;英剧&lt;/em&gt;&lt;span&gt;2&lt;/span&gt;&lt;a href=&quot;/resource/37449&quot; title=&quot;性教育&quot;&gt;性教育&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;3&lt;/span&gt;&lt;a href=&quot;/resource/39348&quot; title=&quot;局外人&quot;&gt;局外人&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;3&lt;/span&gt;&lt;a href=&quot;/resource/39348&quot; title=&quot;局外人&quot;&gt;局外人&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;4&lt;/span&gt;&lt;a href=&quot;/resource/38580&quot; title=&quot;终结者：黑暗命运&quot;&gt;终结者：黑暗命运&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;4&lt;/span&gt;&lt;a href=&quot;/resource/38580&quot; title=&quot;终结者：黑暗命运&quot;&gt;终结者：黑暗命运&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;5&lt;/span&gt;&lt;a href=&quot;/resource/39370&quot; title=&quot;丧钟：骑士与龙&quot;&gt;丧钟：骑士与龙&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;5&lt;/span&gt;&lt;a href=&quot;/resource/39370&quot; title=&quot;丧钟：骑士与龙&quot;&gt;丧钟：骑士与龙&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;6&lt;/span&gt;&lt;a href=&quot;/resource/39394&quot; title=&quot;忒修斯之船&quot;&gt;忒修斯之船&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;6&lt;/span&gt;&lt;a href=&quot;/resource/39394&quot; title=&quot;忒修斯之船&quot;&gt;忒修斯之船&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;7&lt;/span&gt;&lt;a href=&quot;/resource/39392&quot; title=&quot;这个男人是我人生最大的错误&quot;&gt;这个男人是我人生最大的错误&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;7&lt;/span&gt;&lt;a href=&quot;/resource/39392&quot; title=&quot;这个男人是我人生最大的错误&quot;&gt;这个男人是我人生最大的错误&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;8&lt;/span&gt;&lt;a href=&quot;/resource/39381&quot; title=&quot;猎龙飞船&quot;&gt;猎龙飞船&lt;/a&gt;&apos;, &apos;&lt;em&gt;日剧&lt;/em&gt;&lt;span&gt;8&lt;/span&gt;&lt;a href=&quot;/resource/39381&quot; title=&quot;猎龙飞船&quot;&gt;猎龙飞船&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;9&lt;/span&gt;&lt;a href=&quot;/resource/35493&quot; title=&quot;良医&quot;&gt;良医&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;9&lt;/span&gt;&lt;a href=&quot;/resource/35493&quot; title=&quot;良医&quot;&gt;良医&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;10&lt;/span&gt;&lt;a href=&quot;/resource/39321&quot; title=&quot;掠夺者&quot;&gt;掠夺者&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;10&lt;/span&gt;&lt;a href=&quot;/resource/39321&quot; title=&quot;掠夺者&quot;&gt;掠夺者&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;11&lt;/span&gt;&lt;a href=&quot;/resource/39339&quot; title=&quot;小美国&quot;&gt;小美国&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;11&lt;/span&gt;&lt;a href=&quot;/resource/39339&quot; title=&quot;小美国&quot;&gt;小美国&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;12&lt;/span&gt;&lt;a href=&quot;/resource/10760&quot; title=&quot;无耻家庭&quot;&gt;无耻家庭&lt;/a&gt;&apos;, &apos;&lt;em&gt;美剧&lt;/em&gt;&lt;span&gt;12&lt;/span&gt;&lt;a href=&quot;/resource/10760&quot; title=&quot;无耻家庭&quot;&gt;无耻家庭&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;13&lt;/span&gt;&lt;a href=&quot;/resource/39325&quot; title=&quot;倒忌时&quot;&gt;倒忌时&lt;/a&gt;&apos;, &apos;&lt;em&gt;电影&lt;/em&gt;&lt;span&gt;13&lt;/span&gt;&lt;a href=&quot;/resource/39325&quot; title=&quot;倒忌时&quot;&gt;倒忌时&lt;/a&gt;&apos;] 12345678910111213regex_data = '&lt;em&gt;(.*?)&lt;/em&gt;.*?&lt;span&gt;(\d+)&lt;/span&gt;.*?&lt;a href="(.*?)" title="(.*?)"&gt;.*?&lt;/a&gt;'data_list = []for ri in result: r = re.search(regex_data,ri,re.S) print(r.groups()) item = dict() item['type'] = r.group(1) item['index'] = r.group(2) item['link'] = 'http://www.zmz2019.com/' + r.group(3) item['name'] = r.group(4) if(item in data_list): continue data_list.append(item)(&apos;电影&apos;, &apos;1&apos;, &apos;/resource/39382&apos;, &apos;阿基米德大战&apos;) (&apos;英剧&apos;, &apos;2&apos;, &apos;/resource/37449&apos;, &apos;性教育&apos;) (&apos;英剧&apos;, &apos;2&apos;, &apos;/resource/37449&apos;, &apos;性教育&apos;) (&apos;美剧&apos;, &apos;3&apos;, &apos;/resource/39348&apos;, &apos;局外人&apos;) (&apos;美剧&apos;, &apos;3&apos;, &apos;/resource/39348&apos;, &apos;局外人&apos;) (&apos;电影&apos;, &apos;4&apos;, &apos;/resource/38580&apos;, &apos;终结者：黑暗命运&apos;) (&apos;电影&apos;, &apos;4&apos;, &apos;/resource/38580&apos;, &apos;终结者：黑暗命运&apos;) (&apos;美剧&apos;, &apos;5&apos;, &apos;/resource/39370&apos;, &apos;丧钟：骑士与龙&apos;) (&apos;美剧&apos;, &apos;5&apos;, &apos;/resource/39370&apos;, &apos;丧钟：骑士与龙&apos;) (&apos;日剧&apos;, &apos;6&apos;, &apos;/resource/39394&apos;, &apos;忒修斯之船&apos;) (&apos;日剧&apos;, &apos;6&apos;, &apos;/resource/39394&apos;, &apos;忒修斯之船&apos;) (&apos;日剧&apos;, &apos;7&apos;, &apos;/resource/39392&apos;, &apos;这个男人是我人生最大的错误&apos;) (&apos;日剧&apos;, &apos;7&apos;, &apos;/resource/39392&apos;, &apos;这个男人是我人生最大的错误&apos;) (&apos;日剧&apos;, &apos;8&apos;, &apos;/resource/39381&apos;, &apos;猎龙飞船&apos;) (&apos;日剧&apos;, &apos;8&apos;, &apos;/resource/39381&apos;, &apos;猎龙飞船&apos;) (&apos;美剧&apos;, &apos;9&apos;, &apos;/resource/35493&apos;, &apos;良医&apos;) (&apos;美剧&apos;, &apos;9&apos;, &apos;/resource/35493&apos;, &apos;良医&apos;) (&apos;电影&apos;, &apos;10&apos;, &apos;/resource/39321&apos;, &apos;掠夺者&apos;) (&apos;电影&apos;, &apos;10&apos;, &apos;/resource/39321&apos;, &apos;掠夺者&apos;) (&apos;美剧&apos;, &apos;11&apos;, &apos;/resource/39339&apos;, &apos;小美国&apos;) (&apos;美剧&apos;, &apos;11&apos;, &apos;/resource/39339&apos;, &apos;小美国&apos;) (&apos;美剧&apos;, &apos;12&apos;, &apos;/resource/10760&apos;, &apos;无耻家庭&apos;) (&apos;美剧&apos;, &apos;12&apos;, &apos;/resource/10760&apos;, &apos;无耻家庭&apos;) (&apos;电影&apos;, &apos;13&apos;, &apos;/resource/39325&apos;, &apos;倒忌时&apos;) (&apos;电影&apos;, &apos;13&apos;, &apos;/resource/39325&apos;, &apos;倒忌时&apos;) 12for x in data_list: print(x){&apos;type&apos;: &apos;电影&apos;, &apos;index&apos;: &apos;1&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39382&apos;, &apos;name&apos;: &apos;阿基米德大战&apos;} {&apos;type&apos;: &apos;英剧&apos;, &apos;index&apos;: &apos;2&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/37449&apos;, &apos;name&apos;: &apos;性教育&apos;} {&apos;type&apos;: &apos;美剧&apos;, &apos;index&apos;: &apos;3&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39348&apos;, &apos;name&apos;: &apos;局外人&apos;} {&apos;type&apos;: &apos;电影&apos;, &apos;index&apos;: &apos;4&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/38580&apos;, &apos;name&apos;: &apos;终结者：黑暗命运&apos;} {&apos;type&apos;: &apos;美剧&apos;, &apos;index&apos;: &apos;5&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39370&apos;, &apos;name&apos;: &apos;丧钟：骑士与龙&apos;} {&apos;type&apos;: &apos;日剧&apos;, &apos;index&apos;: &apos;6&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39394&apos;, &apos;name&apos;: &apos;忒修斯之船&apos;} {&apos;type&apos;: &apos;日剧&apos;, &apos;index&apos;: &apos;7&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39392&apos;, &apos;name&apos;: &apos;这个男人是我人生最大的错误&apos;} {&apos;type&apos;: &apos;日剧&apos;, &apos;index&apos;: &apos;8&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39381&apos;, &apos;name&apos;: &apos;猎龙飞船&apos;} {&apos;type&apos;: &apos;美剧&apos;, &apos;index&apos;: &apos;9&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/35493&apos;, &apos;name&apos;: &apos;良医&apos;} {&apos;type&apos;: &apos;电影&apos;, &apos;index&apos;: &apos;10&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39321&apos;, &apos;name&apos;: &apos;掠夺者&apos;} {&apos;type&apos;: &apos;美剧&apos;, &apos;index&apos;: &apos;11&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39339&apos;, &apos;name&apos;: &apos;小美国&apos;} {&apos;type&apos;: &apos;美剧&apos;, &apos;index&apos;: &apos;12&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/10760&apos;, &apos;name&apos;: &apos;无耻家庭&apos;} {&apos;type&apos;: &apos;电影&apos;, &apos;index&apos;: &apos;13&apos;, &apos;link&apos;: &apos;http://www.zmz2019.com//resource/39325&apos;, &apos;name&apos;: &apos;倒忌时&apos;} 12345with open('top24-RR.md','w',encoding='utf-8') as f: f.write('# 24小时下载热门\n') for x in data_list: f.write("## " + str(x['index']) + x['name'] + '-' + x['type'] + '\n') f.write("link:" + x['link'] + '\n')最终结果如下：]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>re</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫原理及基础]]></title>
    <url>%2Fposts%2F5d834ab4.html</url>
    <content type="text"><![CDATA[HTTP基本原理URIURI包括URL与URN。可用如下的图表示：URI = Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。URL = Universal Resource Locator 统一资源定位符，一种定位资源的主要访问机制的字符串，一个标准的URL必须包括：protocol、host、port、path、parameter、anchor。例子是一个网址，可以通过这个位置获取资源。URN = Universal Resource Name 统一资源名称，通过特定命名空间中的唯一名称或ID来标识资源。例子是一本书的ISBN：9787500577690，但是没有定位位置。两个协议What’s HTTP？HTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。What‘s HTTPSHTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。简单的讲就是HTTPS是HTTP的安全版，在HTTP下加入SSL层，简称HTTPS。HTTP请求过程TCP三次握手在谷歌浏览器查看请求返回的数据，按F12查看：一个请求包含：请求方法，可以是GET和POST请求的网址请求头(Headers)请求体，一般是POST提交的表单数据一个响应包括：响应状态吗，表示服务器的响应状态响应头，与请求头类似响应体，响应的正文数据在响应体中。响应码可以看下面的博文，很详细：苦心明网页网页组成HTML，基础框架。CSS，装饰网页。JS，给网页增加交互性。网页结构HTML DOM将HTML文档视作树结构，这种结构被称为节点树定位节点——CSS选择器在CSS中，我们使用CSS选择器来定位节点。例如，上例中div节点的id为container，那么就可以表示为#container，其中#开头代表选择id，其后紧跟id的名称。另外，如果我们想选择class为wrapper的节点，便可以使用.wrapper，这里以点（.）开头代表选择class，其后紧跟class的名称。另外，还有一种选择方式，那就是根据标签名筛选，例如想选择二级标题，直接用h2即可。这是最常用的3种表示，分别是根据id、class、标签名筛选，请牢记它们的写法。另外，CSS选择器还支持嵌套选择，各个选择器之间加上空格分隔开便可以代表嵌套关系，如#container .wrapper p则代表先选择id为container的节点，然后选中其内部的class为wrapper的节点，然后再进一步选中其内部的p节点。另外，如果不加空格，则代表并列关系，如div#container .wrapper p.text代表先选择id为container的div节点，然后选中其内部的class为wrapper的节点，再进一步选中其内部的class为text的p节点。这就是CSS选择器，其筛选功能还是非常强大的。CSS选择器的语法规则可以参考W3schoolW3school爬虫基本原理过程获取网页提取信息保存数据自动化思维导图奉上]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo再配置]]></title>
    <url>%2Fposts%2F189af858.html</url>
    <content type="text"><![CDATA[之前配置了一些，现在再配置一些切换主题直接在_config.yml文件下修改即可，不过得先下载号需要的主题文件新建文章使用命令hexo new &quot;文章名&quot;,新建一个新的文章假如需要为每一个新建的文章都用一个文件夹存文章需要用到的一些图片文件或者资源，可以进行如下的配置到博客根目录下 查看_config.yml文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true -&gt; post_asset_folder:true执行 npm install https://github.com/CodeFalling/hexo-asset-image –save 命令来进行插件的安装实现fork me on github在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码：将刚刚复制的挂饰代码，添加到Blog/themes/next/layout/_layout.swig文件中，添加位置如下图所示(放在下方)：文章末尾添加“文章结束”标记在路径Blog\themes\next\layout\_macro文件夹中新建passage-end-tag.swig文件。在passage-end-tag.swig添加以下内容，直接用文本编辑器打开，粘贴以下内容后保存12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;打开Blog\themes\next\layout\_macro\post.swig，在post-body之后，post-footer之前（post-footer之前两个DIV），添加以下代码：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt;添加代码位置如下：修改主题配置文件_config.yml，在末尾添加：123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true配置完成。文章显示一部分在需要显示的内容之后（屏蔽的内容之前）添加代码 &lt;!--more--&gt;即可修改代码块自定义样式这里需要新建两个js文件events.js和codeblock.js，路径位于/themes/next/scripts/包下。events.js代码：1234567// mac Panel效果代码块相关var exec = require('child_process').exec;// new 后自动打开编辑器hexo.on('new', function(data)&#123; exec('open -a MacDown ' + data.path);&#125;);这个js会在你敲hexo new xxx命令后，调用本地的MarkDown编辑器打开新建的md文件xxxcodeblock.js代码：12345678910111213141516171819202122// mac Panel效果代码块相关var attributes = [ 'autocomplete="off"', 'autocorrect="off"', 'autocapitalize="off"', 'spellcheck="false"', 'contenteditable="true"']var attributesStr = attributes.join(' ')hexo.extend.filter.register('after_post_render', function (data) &#123; while (/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/.test(data.content)) &#123; data.content = data.content.replace(/&lt;figure class="highlight ([a-zA-Z]+)"&gt;.*?&lt;\/figure&gt;/, function () &#123; var language = RegExp.$1 || 'plain' var lastMatch = RegExp.lastMatch lastMatch = lastMatch.replace(/&lt;figure class="highlight /, '&lt;figure class="iseeu highlight /') return '&lt;div class="highlight-wrap"' + attributesStr + 'data-rel="' + language.toUpperCase() + '"&gt;' + lastMatch + '&lt;/div&gt;' &#125;) &#125; return data&#125;)引入css在/themes/next/source/css/_common/components/highlight/目录下新建macPanel.styl文件，内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// mac Panel效果代码块相关.highlight-wrap[data-rel] &#123; position: relative; overflow: hidden; border-radius: 5px; //box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4); box-shadow:18px 18px 15px 0px rgba(0,0,0,.4) margin: 35px 0; ::-webkit-scrollbar &#123; height: 10px; &#125; ::-webkit-scrollbar-track &#123; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; &#125; ::-webkit-scrollbar-thumb &#123; border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); &#125; &amp;::before &#123; color: white; content: attr(data-rel); height: 38px; line-height: 38px; //background: #21252b; background: #108414de; color: #fff; font-size: 16px; //position: absolute; top: 0; left: 0; width: 100%; //font-family: 'Source Sans Pro', sans-serif; font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; &#125; &amp;::after &#123; content: ' '; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; &#125;&#125;配置引用在/themes/next/source/css/_common/components/highlight/highlight.styl中引入刚才新建的macPanel.styl：1@require "macPanel"配置在文件的顶部位置即可。到此Mac Panel配置完成，根据需要可调整主题配置文件中的highlight_theme的值，选择自己喜欢的样式。遇到错误可将**站点配置文件里的highlight属性auto_detect改成false：123456highlight: enable: true line_number: true- auto_detect: true+ auto_detect: false tab_replace:代码块复制功能下载 clipboard.js下载第三方插件：clipboard.js, 或者直接下载 (右键另存为)。保存文件到 theme/next/source/js/src 下。在 theme/next/source/js/src 目录下，创建 clipboard-use.js，添加内容如下：1234567891011121314151617/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function()&#123; var copyHtml = ''; copyHtml += '&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'; copyHtml += '&lt;span&gt;复制&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(".highlight .code pre").before(copyHtml); new ClipboardJS('.btn-copy', &#123; target: function(trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); &#125; initCopyCode();&#125;(window, document);在 theme/next/source/css/_custom/custom.styl 样式中添加如下代码：123456789101112131415161718192021222324252627282930313233343536//代码块复制按钮.highlight&#123; //方便copy代码按钮（btn-copy）的定位 position: relative;&#125;.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy&#123; opacity: 1;&#125;在 themes/next/layout/_layout.swig 文件中引用（/body）之前添加：123&lt;!-- 代码块复制功能 --&gt;&lt;script type="text/javascript" src="/js/src/clipboard.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/js/src/clipboard-use.js"&gt;&lt;/script&gt;或者将 clipboard.min.js 和 clipboard-use.js 保存到类似七牛云上，通过引用也可（推荐）侧边栏社交小图标设置打开主题配置文件_config.yml，command+f搜索Social，将你有的社交账号前面的#号去掉。格式为：1[社交平台名]: [社交地址] || [图标名称]图标可以去Font Awesome Icon网站去找，找到后复制名字到相应的位置即可。网站底部字数统计安装hexo插件，切换到根目录：1npm install hexo-wordcount --save在Blog/themes/next/layout/_partials/footer.swig末尾添加代码：1234&lt;div class="theme-info"&gt; &lt;div class="powered-by"&gt;&lt;/div&gt; &lt;span class="post-count"&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt;设置网站的图标Favicon在图标网站找一张你喜欢的图标（大：32x32 小：16x16），图标网站：easyicon或者阿里巴巴矢量图标库。将下载下来的小图和中图放在Blog/themes/next/source/images，将默认的两张图片替换掉。命名和默认的一样也可以自己定义：修改主题配置文件，如果你自定义了图片名字，需要做修改：123456789# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png //16X16小图 medium: /images/favicon-32x32-next.png //32X32大图 apple_touch_icon: /images/apple-touch-icon-next.png //apple-touch-icon safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml实现文章统计功能安装Hexo插件，参考网站底部字数统计。编辑主题配置文件，配置如下：12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true网页标题崩溃特效当用户离开站点相关的页面时，网页的标题会变成已崩溃，网站图标也会改变；当用户重新回到站点页面时又恢复正常。实现方式：在/themes/next/source/js/src/目录下新建crash_cheat.js，代码如下：1234567891011121314151617181920/* 离开当前页面时修改网页标题，回到当前页面时恢复原来标题 */window.onload = function() &#123; var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function() &#123; if(document.hidden) &#123; $('[rel="icon"]').attr('href', "../../images/failure.png"); $('[rel="shortcut icon"]').attr('href', "../../images/failure.png"); document.title = '(●—●)喔哟，崩溃啦！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "../../images/favicon-32x32-next.png"); $('[rel="shortcut icon"]').attr('href', "../../images/favicon-32x32-next.png"); document.title = '(/≧▽≦/)咦！页面又好了！'; titleTime = setTimeout(function() &#123; document.title = OriginTitile; &#125;, 2000); &#125; &#125;);&#125;;在/themes/next/layout/_layout.swig文件末尾，添加引用：12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/crash_cheat.js"&gt;&lt;/script&gt;最后在站点根目录的/themes/next/source/images/目录下添加failure.png，作为网站崩溃时显示的图标，如下：完成效果如下：自定义友链页面新增 links 页面在控制台使用命令创建：1$ hexo new page links然后在博客根目录 /source 下会生成一个 links 文件夹，打开其中的 index.md 文件，在头部写入 type = “links”，如下：12345---title: 友情链接date: 2019-08-11 15:34:16+ type: "links"---关闭评论123456---title: 友情链接date: 2019-08-11 15:34:16type: "links"+ comments: false---配置 menu主题配置文件中menu下添加：1links: /links/ || link在 /themes/next/languages/zh-Hans.yml 文件中 menu 下增加中文描述1links: 友链接下来就是要增加友链页面的样式了新增 links.swig 页在 /themes/next/layout/ 新建 links.swig，内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&#123;% block content %&#125; &#123;######################&#125; &#123;### LINKS BLOCK ###&#125; &#123;######################&#125; &lt;div id="links"&gt; &lt;style&gt; #links&#123; margin-top: 5rem; &#125; .links-content&#123; margin-top:1rem; &#125; .link-navigation::after &#123; content: " "; display: block; clear: both; &#125; .card &#123; width: 300px; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; &#125; .card:nth-child(odd) &#123; float: left; &#125; .card:nth-child(even) &#123; float: right; &#125; .card:hover &#123; transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); &#125; .card a &#123; border:none; &#125; .card .ava &#123; width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; &#125; .card .card-header &#123; font-style: italic; overflow: hidden; width: 236px; &#125; .card .card-header a &#123; font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; &#125; .card .card-header a:hover &#123; color: #d480aa; text-decoration: none; &#125; .card .card-header .info &#123; font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; &#125; &lt;/style&gt; &lt;div class="links-content"&gt; &lt;div class="link-navigation"&gt; &#123;% for link in theme.mylinks %&#125; &lt;div class="card"&gt; &lt;img class="ava" src="&#123;&#123; link.avatar &#125;&#125;"/&gt; &lt;div class="card-header"&gt; &lt;div&gt; &lt;a href="&#123;&#123; link.site &#125;&#125;" target="_blank"&gt; &#123;&#123; link.nickname &#125;&#125;&lt;/a&gt; &lt;a href="&#123;&#123; link.site &#125;&#125;" target="_blank"&gt;&lt;span class="focus-links"&gt;关注&lt;/span&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="info"&gt;&#123;&#123; link.info &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;&#123; page.content &#125;&#125; &lt;/div&gt; &lt;/div&gt; &#123;##########################&#125; &#123;### END LINKS BLOCK ###&#125; &#123;##########################&#125;&#123;% endblock %&#125;修改 page.swig修改 /themes/next/layout/page.swig 文件，在开头的 block title 内部12#&#125;&#123;% elif page.type === "tags" and not page.title %&#125;&#123;# #&#125;&#123;&#123; __('title.tag') + page_title_suffix &#125;&#125;&#123;#这个位置下添加代码：123&lt;!-- 友情链接--&gt;#&#125;&#123;% elif page.type === 'links' and not page.title %&#125;&#123;# #&#125;&#123;&#123; __('title.links') + page_title_suffix &#125;&#125;&#123;#效果图：引入 links.swig接着在 /themes/next/layout/page.swig 中 PAGE BODY 内部，引入刚才新建的 page.swig :123&lt;!-- 友情链接--&gt;&#123;% elif page.type === 'links' %&#125; &#123;% include 'links.swig' %&#125;完成页面样式的配置配置友链接下来，在 /themes/next/_config.yml 文件中配置友链，末尾处新增 mylinks ，如下123456789101112131415161718192021mylinks:- nickname: Leaf's Blog avatar: https://www.liaofuzhan.com/images/beichen.png site: https://www.liaofuzhan.com info: 因心造境，风云由我！ - nickname: Victor's Blog avatar: https://jiahong.cf/myPhotos/hicon.jpg site: https://jiahong.cf info: Victor's Home- nickname: hoxis' blog avatar: https://hoxis.github.io/uploads/avatar.png site: https://hoxis.github.io/ info: 生命在于折腾 - nickname: Never_yu avatar: https://neveryu.github.io/avatar/avatar.png site: https://neveryu.github.io/ info: 认真的人才有资格开玩笑最终效果：Valine: 独立博客评论系统获取 APP ID 和 APP KEY点击这里登录或注册Leancloud点这里创建应用，应用名看个人喜好。选择刚刚创建的应用&gt;设置&gt;选择应用 Key，然后你就能看到你的APP ID和APP KEY了，参考下图：为了您的数据安全，请填写应用&gt;设置&gt;安全设置中的Web 安全域名，如下图：修改主题模板编辑 /next/_config.yml 文件搜索 valine ，配置 appid 和 appkey 为 LeanCloud 分配的值，language 为 zh-cn，注意大小写，只能是小写，否则初始化 Valine 时会报错，导致看不到评论区域。其它选择根据自己的需求修改。修改 valine.min.js 的 cdn 文件地址，到这里 https://www.jsdelivr.com/package/npm/valine 这个地址选择最新版本的Valine，然后获取cdn地址，修改到 主题配置文件 _config.yml 即可。好像不需要修改了。。。。。。最终效果：彩色标签页在 /themes/next/layout/ 目录下，新增 tag-color.swig 文件，填入如下内容：1234567891011121314151617181920212223242526272829303132333435&lt;script type="text/javascript"&gt; var alltags = document.getElementsByClassName('tag-cloud-tags'); var tags = alltags[0].getElementsByTagName('a'); for (var i = tags.length - 1; i &gt;= 0; i--) &#123; var r=Math.floor(Math.random()*75+130); var g=Math.floor(Math.random()*75+100); var b=Math.floor(Math.random()*75+80); tags[i].style.background = "rgb("+r+","+g+","+b+")"; &#125;&lt;/script&gt;&lt;style&gt; .tag-cloud-tags&#123; /*font-family: Helvetica, Tahoma, Arial;*/ /*font-weight: 100;*/ text-align: center; counter-reset: tags; &#125; .tag-cloud-tags a&#123; border-radius: 6px; padding-right: 5px; padding-left: 5px; margin: 8px 5px 0px 0px; &#125; .tag-cloud-tags a:before&#123; content: "🔖"; &#125; .tag-cloud-tags a:hover&#123; box-shadow: 0px 5px 15px 0px rgba(0,0,0,.4); transform: scale(1.1); /*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/ transition-duration: 0.15s; &#125;&lt;/style&gt;在同级目录的 page.swig 中引入 tag-color.swi123456789101112131415161718192021222324 &lt;div class="tag-cloud"&gt; &lt;!-- 目前共计xxx个标签 &lt;div class="tag-cloud-title"&gt; &#123;&#123; _p('counter.tag_cloud', site.tags.length) &#125;&#125; &lt;/div&gt; --&gt; &lt;div class="tag-cloud-tags"&gt; &#123;&#123; tagcloud(&#123;min_font: 10, max_font: 15, amount: 300, color: true, start_color: '#ccc', end_color: '#111'&#125;) &#125;&#125; &lt;/div&gt; &lt;/div&gt; + &#123;% include 'tag-color.swig' %&#125; &#123;% elif page.type === 'categories' %&#125; &lt;div class="category-all-page"&gt; &lt;div class="category-all-title"&gt; &#123;&#123; _p('counter.categories', site.categories.length) &#125;&#125; &lt;/div&gt; &lt;div class="category-all"&gt; &#123;&#123; list_categories() &#125;&#125; &lt;/div&gt; &lt;/div&gt;最终效果：以下是文章底部的标签样式1234567891011121314151617181920212223242526/*文章底部标签样式*/.posts-expand .post-tags a &#123; -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); -moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); box-shadow: 0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24); font-family: 'Comic Sans MS', sans-serif; transition: .2s ease-out; padding: 3px 5px; margin: 5px; background: #f5f5f5; border-bottom: none; border-radius: 15px; +mobile()&#123; padding: 1px 3px; font-size: 8px; &#125; &amp;:hover &#123; background: rgba(100,154,182,0.902); color: #fff; -webkit-box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); -moz-box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); &#125;&#125;代码拷入 /themes/next/source/css/_custom/custom.styl 即可归档页美化修改 /themes/next/layout/_macro/post-collapse.swig 后的代码如下：12345678910111213141516171819202122232425262728293031323334&#123;% macro render(post) %&#125; &lt;article class="my-post post-type-&#123;&#123; post.type | default('normal') &#125;&#125;" itemscope itemtype="http://schema.org/Article"&gt; &lt;header class="my-post-header"&gt; &lt;div class="my-post-meta"&gt; &lt;time class="my-post-time" itemprop="dateCreated" datetime="&#123;&#123; moment(post.date).format() &#125;&#125;" content="&#123;&#123; date(post.date, config.date_format) &#125;&#125;" &gt; &#123;&#123; date(post.date, 'MM-DD') &#125;&#125; &lt;/time&gt; &lt;/div&gt; &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class="my-post-title"&gt; &#123;% if post.link %&#125;&#123;# Link posts #&#125; &lt;a class="my-post-title-link post-title-link-external" target="_blank" href="&#123;&#123; url_for(post.link) &#125;&#125;" itemprop="url"&gt; &#123;&#123; post.title or post.link &#125;&#125; &lt;i class="fa fa-external-link"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% else %&#125; &lt;a class="my-post-title-link" href="&#123;&#123; url_for(post.path) &#125;&#125;" itemprop="url"&gt; &#123;% if post.type === 'picture' %&#125; &#123;&#123; post.content &#125;&#125; &#123;% else %&#125; &lt;span itemprop="name"&gt;&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;&lt;/span&gt; &#123;% endif %&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt; &lt;/header&gt; &lt;/article&gt;&#123;% endmacro %&#125;主要修改：一是将 post-meta 这个 div 移到前面 header 标签下；二是将所有的 class 属性都加上 my-，例如 my-post-meta，这样改动是为了不影响其它页面引用的样式。在 /themes/next/source/css/_custom/custom.styl 新增如下样式：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123/* 归档页样式 began */.page-archive .archive-page-counter &#123; font-size: 18px; background-color: #49b1f5; padding-left: 10px; padding-right: 10px; border-radius: 8px; color: #fff; +mobile() &#123; font-size: 16px; &#125;&#125;.my-post-time&#123; font-size: 11px; position: absolute; color: #fff; background-color: #49b1f5; border-radius: 5px; padding-left: 5px; padding-right: 5px; margin-left: 15px;&#125;.mypost&#123; position: relative; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;a.my-post-title-link:before&#123; top: 10px; width: 18px; height: 18px; content: "📚"; margin-right: 5px; font: normal normal normal 14px/1 FontAwesome; font-size: 15px; line-height: 18px;&#125;.my-post:hover&#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 30px; width: 400px; padding: 1px 10px; margin-left: 25px; font-size: 16px; transition-duration: 0.15s; +mobile()&#123; width: 260px; margin-left: 18px; &#125; //display:flex;&#125;a.my-post-title-link&#123; text-decoration: none; font-size: 15px; font-weight: 400; +mobile() &#123; font-size: 14px; &#125;&#125;.my-post-title&#123; display: block; margin-left: 4.5rem; color: #4c4948; text-decoration: none; font-size: .8rem; cursor: pointer; +mobile() &#123; //margin-left: 4rem; &#125;&#125;.my-post-header&#123; position: top; margin-bottom: 1rem; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out;&#125;//.my-post-title-link&#123;// font-size: 16px;// font-weight: 500;//&#125;.my-post-meta&#123; position: absolute; color: #99a9bf; width: 80px; color: #114142;&#125;div.post-block.tag .collection-title h2 &#123; border-width: 1px; border-style: solid; border-color: #3f3f3f; border-radius: 20px; font-size: 22px; background-color: #b4e8fa; padding: 2px 15px; letter-spacing: 1.5px; box-sizing: border-box; color: #3f3f3f; display: inline-block; margin: 10px 0 10px; text-align: center; +mobile()&#123; font-size: 18px; &#125;&#125;.category-list-link:hover&#123; transform: scale(1.1); box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1); border-radius: 8px; padding: 1px 1px; margin-left: 5px; font-size: 16px; transition-duration: 0.15s; //display:flex;&#125;/* 归档页样式 end */实现效果：文章推荐文章结束时，开启相关文章推荐功能，会根据文章标签的相关度推荐相关的文章该功能需要依赖 hexo-related-popular-posts 插件：1npm install hexo-related-popular-posts --save在 /themes/next/layout/_macro/ 目录下，新建 post-related.swig 文件，内容如下：12345678910111213141516171819202122232425262728&#123;% set popular_posts = popular_posts_json(theme.related_posts.params, post) %&#125;&#123;% if popular_posts.json and popular_posts.json.length &gt; 0 %&#125; &lt;div class="popular-posts-header"&gt; &lt;i class="fa fa-&#123;&#123; theme.related_posts.icon &#125;&#125;"&gt;&lt;/i&gt; &#123;&#123; theme.related_posts.title | default(__('post.related_posts')) &#125;&#125; &lt;/div&gt; &lt;details&gt; &lt;summary&gt;点击查看&lt;/summary&gt; &lt;ul class="popular-posts"&gt; &#123;% for popular_post in popular_posts.json %&#125; &lt;li class="popular-posts-item"&gt; &#123;% if popular_post.date and popular_post.date != '' %&#125; &lt;div class="popular-posts-date"&gt;&#123;&#123; popular_post.date &#125;&#125;&lt;/div&gt; &#123;% endif %&#125; &#123;% if popular_post.img &amp;&amp; popular_post.img != '' %&#125; &lt;div class="popular-posts-img"&gt;&lt;img src="&#123;&#123; popular_post.img &#125;&#125;" /&gt;&lt;/div&gt; &#123;% endif %&#125; &lt;div class="popular-posts-title"&gt;&lt;a href="&#123;&#123; popular_post.path &#125;&#125;" rel="bookmark"&gt;&#123;&#123; popular_post.title &#125;&#125;&lt;/a&gt;&lt;/div&gt; &#123;% if popular_post.excerpt &amp;&amp; popular_post.excerpt != '' %&#125; &lt;div class="popular-posts-excerpt"&gt;&lt;p&gt;&#123;&#123; popular_post.excerpt &#125;&#125;&lt;/p&gt;&lt;/div&gt; &#123;% endif %&#125; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/details&gt;&#123;% endif %&#125;在同级别的 post.swig 中 END POST BODY 上方（POST 文章末尾）引入：1234 &lt;!-- 相关文章推荐 --&gt;&#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125; &#123;% include 'post-related.swig' with &#123; post: post &#125; %&#125;&#123;% endif %&#125;失败…shareJS分享使用 shareJSgithub 下载 zip 文件，将解压的文件夹 dist 放到博客 /themes/next/source/ 目录在 /themes/next/layout/_layout.swig 中 body 标签内部引入：123&lt;!--share.js--&gt;&lt;link rel="stylesheet" href="/dist/css/share.min.css"&gt;&lt;script src="/dist/js/social-share.min.js"&gt;&lt;/script&gt;在 /themes/next/layout/_partials/share/ 目录下新增 sharejs.swig 文件，添加如下代码：123456789101112131415&lt;div data-weibo-title="分享到微博" data-qq-title="分享到QQ" data-douban-title="分享到豆瓣" class="social-share" class="share-component"&#123;# data-disabled="twitter,facebook"#&#125; data-disabled="qzone,google+,linkedin" data-description="Share.js - 一键分享到微博，QQ空间，腾讯微博，人人，豆瓣..."&gt; 分享到：&lt;/div&gt;在 /themes/next/layout/post.swig 中 标签内部 endif 前引入：12&#123;% elseif theme.share_js %&#125; &#123;% include '_partials/share/sharejs.swig' %&#125;主题配置文件增加主题配置文件增加1share_js: true失败…鼠标样式设置在 /themes/next/source/css/_custom/custom.styl 添加样式：1234567/* 鼠标样式 */* &#123; cursor: url(/images/default.cur),auto;&#125;:link &#123; cursor: url(/images/pointer.cur),auto&#125;打字特效 （评论、留言）此功能主要通过 JS 监听页面的 input 输入框事件来实现。首先在主题 _config.yml 中添加动态配置项1234typing_effect: enabled: true colorful: true # 礼花 shake: false # 震动在 /themes/next/layout/layout.swig 中引入依赖12345678&#123;% if theme.typing_effect %&#125; &lt;script src="/js/src/activate-power-mode.min.js"&gt;&lt;/script&gt; &lt;script&gt; POWERMODE.colorful = &#123;&#123; theme.typing_effect.colorful &#125;&#125;; POWERMODE.shake = &#123;&#123; theme.typing_effect.shake &#125;&#125;; document.body.addEventListener('input', POWERMODE); &lt;/script&gt;&#123;% endif %&#125;其中的 activate-power-mode.min.js 位于 /themes/next/source/js/src/ 目录，代码如下1(function webpackUniversalModuleDefinition(root,factory)&#123;if(typeof exports==='object'&amp;&amp;typeof module==='object')module.exports=factory();else if(typeof define==='function'&amp;&amp;define.amd)define([],factory);else if(typeof exports==='object')exports["POWERMODE"]=factory();else root["POWERMODE"]=factory()&#125;)(this,function()&#123;return(function(modules)&#123;var installedModules=&#123;&#125;;function __webpack_require__(moduleId)&#123;if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]=&#123;exports:&#123;&#125;,id:moduleId,loaded:false&#125;;modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports&#125;__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)&#125;)([function(module,exports,__webpack_require__)&#123;'use strict';var canvas=document.createElement('canvas');canvas.width=window.innerWidth;canvas.height=window.innerHeight;canvas.style.cssText='position:fixed;top:0;left:0;pointer-events:none;z-index:999999';window.addEventListener('resize',function()&#123;canvas.width=window.innerWidth;canvas.height=window.innerHeight&#125;);document.body.appendChild(canvas);var context=canvas.getContext('2d');var particles=[];var particlePointer=0;POWERMODE.shake=true;function getRandom(min,max)&#123;return Math.random()*(max-min)+min&#125;function getColor(el)&#123;if(POWERMODE.colorful)&#123;var u=getRandom(0,360);return'hsla('+getRandom(u-10,u+10)+', 100%, '+getRandom(50,80)+'%, '+1+')'&#125;else&#123;return window.getComputedStyle(el).color&#125;&#125;function getCaret()&#123;var el=document.activeElement;var bcr;if(el.tagName==='TEXTAREA'||(el.tagName==='INPUT'&amp;&amp;el.getAttribute('type')==='text'))&#123;var offset=__webpack_require__(1)(el,el.selectionStart);bcr=el.getBoundingClientRect();return&#123;x:offset.left+bcr.left,y:offset.top+bcr.top,color:getColor(el)&#125;&#125;var selection=window.getSelection();if(selection.rangeCount)&#123;var range=selection.getRangeAt(0);var startNode=range.startContainer;if(startNode.nodeType===document.TEXT_NODE)&#123;startNode=startNode.parentNode&#125;bcr=range.getBoundingClientRect();return&#123;x:bcr.left,y:bcr.top,color:getColor(startNode)&#125;&#125;return&#123;x:0,y:0,color:'transparent'&#125;&#125;function createParticle(x,y,color)&#123;return&#123;x:x,y:y,alpha:1,color:color,velocity:&#123;x:-1+Math.random()*2,y:-3.5+Math.random()*2&#125;&#125;&#125;function POWERMODE()&#123;&#123;var caret=getCaret();var numParticles=5+Math.round(Math.random()*10);while(numParticles--)&#123;particles[particlePointer]=createParticle(caret.x,caret.y,caret.color);particlePointer=(particlePointer+1)%500&#125;&#125;&#123;if(POWERMODE.shake)&#123;var intensity=1+2*Math.random();var x=intensity*(Math.random()&gt;0.5?-1:1);var y=intensity*(Math.random()&gt;0.5?-1:1);document.body.style.marginLeft=x+'px';document.body.style.marginTop=y+'px';setTimeout(function()&#123;document.body.style.marginLeft='';document.body.style.marginTop=''&#125;,75)&#125;&#125;&#125;;POWERMODE.colorful=false;function loop()&#123;requestAnimationFrame(loop);context.clearRect(0,0,canvas.width,canvas.height);for(var i=0;i&lt;particles.length;++i)&#123;var particle=particles[i];if(particle.alpha&lt;=0.1)continue;particle.velocity.y+=0.075;particle.x+=particle.velocity.x;particle.y+=particle.velocity.y;particle.alpha*=0.96;context.globalAlpha=particle.alpha;context.fillStyle=particle.color;context.fillRect(Math.round(particle.x-1.5),Math.round(particle.y-1.5),3,3)&#125;&#125;requestAnimationFrame(loop);module.exports=POWERMODE&#125;,function(module,exports)&#123;(function()&#123;var properties=['direction','boxSizing','width','height','overflowX','overflowY','borderTopWidth','borderRightWidth','borderBottomWidth','borderLeftWidth','borderStyle','paddingTop','paddingRight','paddingBottom','paddingLeft','fontStyle','fontVariant','fontWeight','fontStretch','fontSize','fontSizeAdjust','lineHeight','fontFamily','textAlign','textTransform','textIndent','textDecoration','letterSpacing','wordSpacing','tabSize','MozTabSize'];var isFirefox=window.mozInnerScreenX!=null;function getCaretCoordinates(element,position,options)&#123;var debug=options&amp;&amp;options.debug||false;if(debug)&#123;var el=document.querySelector('#input-textarea-caret-position-mirror-div');if(el)&#123;el.parentNode.removeChild(el)&#125;&#125;var div=document.createElement('div');div.id='input-textarea-caret-position-mirror-div';document.body.appendChild(div);var style=div.style;var computed=window.getComputedStyle?getComputedStyle(element):element.currentStyle;style.whiteSpace='pre-wrap';if(element.nodeName!=='INPUT')style.wordWrap='break-word';style.position='absolute';if(!debug)style.visibility='hidden';properties.forEach(function(prop)&#123;style[prop]=computed[prop]&#125;);if(isFirefox)&#123;if(element.scrollHeight&gt;parseInt(computed.height))style.overflowY='scroll'&#125;else&#123;style.overflow='hidden'&#125;div.textContent=element.value.substring(0,position);if(element.nodeName==='INPUT')div.textContent=div.textContent.replace(/\s/g,"\u00a0");var span=document.createElement('span');span.textContent=element.value.substring(position)||'.';div.appendChild(span);var coordinates=&#123;top:span.offsetTop+parseInt(computed['borderTopWidth']),left:span.offsetLeft+parseInt(computed['borderLeftWidth'])&#125;;if(debug)&#123;span.style.backgroundColor='#aaa'&#125;else&#123;document.body.removeChild(div)&#125;return coordinates&#125;if(typeof module!="undefined"&amp;&amp;typeof module.exports!="undefined")&#123;module.exports=getCaretCoordinates&#125;else&#123;window.getCaretCoordinates=getCaretCoordinates&#125;&#125;())&#125;])&#125;);类知乎卡片链接在 /themes/next/source/js/src/ 下新建 linkcard.js ，内容如下：12345678910111213141516window.onload=function()&#123; var LinkCards=document.getElementsByClassName('LinkCard'); if(LinkCards.length != 0)&#123; var LinkCard=LinkCards[0]; var link=LinkCard.href; var title=LinkCard.innerText; LinkCard.innerHTML="&lt;style type=text/css&gt;.LinkCard,.LinkCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.LinkCard&#123;position:relative;display:block;margin:5px auto;width:330px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;color:inherit;text-decoration:none&#125;.ztext&#123;word-break:break-word;line-height:1.6&#125;.LinkCard-backdrop&#123;position:absolute;top:0;left:0;right:0;bottom:0;background-repeat:no-repeat;-webkit-filter:blur(20px);filter:blur(20px);background-size:cover;background-position:center&#125;.LinkCard,.LinkCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.LinkCard-content&#123;position:relative;display:flex;align-items:center;justify-content:space-between;padding:12px;border-radius:inherit;background-color:rgba(246,246,246,0.88)&#125;.LinkCard-text&#123;overflow:hidden;width:260px;&#125;.LinkCard-title&#123;white-space: nowrap;display:-webkit-box;-webkit-line-clamp:2;overflow:hidden;text-overflow:ellipsis;max-height:calc(16px * 1.25 * 2);font-size:16px;font-weight:500;line-height:1.25;color:#1a1a1a&#125;@media(max-width: 767px)&#123;.LinkCard-title&#123;font-size:13px;&#125;&#125;.LinkCard-meta&#123;display:flex;margin-top:4px;font-size:14px;line-height:20px;color:#999;white-space:nowrap&#125;.LinkCard-imageCell&#123;margin-left:28px;border-radius:30px;width:70px;&#125;.LinkCard-image&#123;display:block;width:60px;height:auto;border-radius:inherit&#125;&lt;/style&gt;&lt;span class=LinkCard-backdrop style=background-image:url(https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg)&gt;&lt;/span&gt;&lt;span class=LinkCard-content&gt;&lt;span class=LinkCard-text&gt;&lt;span class=LinkCard-title&gt;"+title+"&lt;/span&gt;&lt;span class=LinkCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="+"'Zi Zi--InsertLink'"+" fill=currentColor viewBox="+"'0 0 24 24'"+" width=17 height=17&gt;&lt;path d="+"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"+" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"+link+"&lt;/span&gt;&lt;/span&gt;&lt;span class=LinkCard-imageCell&gt;&lt;img class=LinkCard-image alt=图标 src=/images/linkcard.png&gt;&lt;/span&gt;&lt;/span&gt;"; for (var i = LinkCards.length - 1; i &gt;= 1; i--) &#123; LinkCard=LinkCards[i]; title=LinkCard.innerText; link=LinkCard.href; LinkCard.innerHTML="&lt;span class=LinkCard-backdrop style=background-image:url(https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg)&gt;&lt;/span&gt;&lt;span class=LinkCard-content&gt;&lt;span class=LinkCard-text&gt;&lt;span class=LinkCard-title&gt;"+title+"&lt;/span&gt;&lt;span class=LinkCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="+"'Zi Zi--InsertLink'"+" fill=currentColor viewBox="+"'0 0 24 24'"+" width=17 height=17&gt;&lt;path d="+"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"+" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"+link+"&lt;/span&gt;&lt;/span&gt;&lt;span class=LinkCard-imageCell&gt;&lt;img class=LinkCard-image alt=图标 src=/images/linkcard.png&gt;&lt;/span&gt;&lt;/span&gt;"; &#125; &#125;&#125;需要修改 /images/linkcard.png 为你自己的图片。在 /themes/next/layout/_layout.swig 中 body 结束标签前，引入刚才新建的 js：1&lt;script type="text/javascript" src="/js/src/linkcard.js"&gt;&lt;/script&gt;使用方式：1&lt;a href="https://jiahong.cf" class="LinkCard"&gt;我的相册——时光留影&lt;/a&gt;我的world文章评分功能NexT 主题中已经集成了widgetpack 的星级评分功能，只需注册账号后，修改主题配置：123456# Star rating support to each article.# To get your ID visit https://widgetpack.comrating: enable: true id: your id #&lt;app_id&gt; color: ff9800可以在 widgetpack 控制台中修改评分认证canvas粒子时钟一款不错的 canvas 粒子时钟在 /themes/next/layout/_custom/ 目录下，新建 clock.swig 文件，内容如下：lt;div style=""&gt; &lt;canvas id="canvas" style="width:60%;"&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;&lt;/div&gt;&lt;script&gt;(function()&#123; var digit= [ [ [0,0,1,1,1,0,0], [0,1,1,0,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,0,1,1,0], [0,0,1,1,1,0,0] ],//0 [ [0,0,0,1,1,0,0], [0,1,1,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [1,1,1,1,1,1,1] ],//1 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,1,1,0,0,0], [0,1,1,0,0,0,0], [1,1,0,0,0,0,0], [1,1,0,0,0,1,1], [1,1,1,1,1,1,1] ],//2 [ [1,1,1,1,1,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,1,1,1,0,0], [0,0,0,0,1,1,0], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//3 [ [0,0,0,0,1,1,0], [0,0,0,1,1,1,0], [0,0,1,1,1,1,0], [0,1,1,0,1,1,0], [1,1,0,0,1,1,0], [1,1,1,1,1,1,1], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,1,1,1,1] ],//4 [ [1,1,1,1,1,1,1], [1,1,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,1,1,1,0], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//5 [ [0,0,0,0,1,1,0], [0,0,1,1,0,0,0], [0,1,1,0,0,0,0], [1,1,0,0,0,0,0], [1,1,0,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//6 [ [1,1,1,1,1,1,1], [1,1,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,0,0,1,1,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0], [0,0,1,1,0,0,0] ],//7 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,1,1,0] ],//8 [ [0,1,1,1,1,1,0], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [1,1,0,0,0,1,1], [0,1,1,1,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,0,1,1], [0,0,0,0,1,1,0], [0,0,0,1,1,0,0], [0,1,1,0,0,0,0] ],//9 [ [0,0,0,0,0,0,0], [0,0,1,1,1,0,0], [0,0,1,1,1,0,0], [0,0,1,1,1,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,1,1,1,0,0], [0,0,1,1,1,0,0], [0,0,1,1,1,0,0], [0,0,0,0,0,0,0] ]//: ];var canvas = document.getElementById('canvas');if(canvas.getContext)&#123; var cxt = canvas.getContext('2d'); //声明canvas的宽高 var H = 100,W = 700; canvas.height = H; canvas.width = W; cxt.fillStyle = '#f00'; cxt.fillRect(10,10,50,50); //存储时间数据 var data = []; //存储运动的小球 var balls = []; //设置粒子半径 var R = canvas.height/20-1; (function()&#123; var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date()); //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成 data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]); &#125;)(); /*生成点阵数字*/ function renderDigit(index,num)&#123; for(var i = 0; i &lt; digit[num].length; i++)&#123; for(var j = 0; j &lt; digit[num][i].length; j++)&#123; if(digit[num][i][j] == 1)&#123; cxt.beginPath(); cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI); cxt.closePath(); cxt.fill(); &#125; &#125; &#125; &#125; /*更新时钟*/ function updateDigitTime()&#123; var changeNumArray = []; var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date()); var NewData = []; NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]); for(var i = data.length-1; i &gt;=0 ; i--)&#123; //时间发生变化 if(NewData[i] !== data[i])&#123; //将变化的数字值和在data数组中的索引存储在changeNumArray数组中 changeNumArray.push(i+'_'+(Number(data[i])+1)%10); &#125; &#125; //增加小球 for(var i = 0; i&lt; changeNumArray.length; i++)&#123; addBalls.apply(this,changeNumArray[i].split('_')); &#125; data = NewData.concat(); &#125; /*更新小球状态*/ function updateBalls()&#123; for(var i = 0; i &lt; balls.length; i++)&#123; balls[i].stepY += balls[i].disY; balls[i].x += balls[i].stepX; balls[i].y += balls[i].stepY; if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123; balls.splice(i,1); i--; &#125; &#125; &#125; /*增加要运动的小球*/ function addBalls(index,num)&#123; var numArray = [1,2,3]; var colorArray = ["#3BE","#09C","#A6C","#93C","#9C0","#690","#FB3","#F80","#F44","#C00"]; for(var i = 0; i &lt; digit[num].length; i++)&#123; for(var j = 0; j &lt; digit[num][i].length; j++)&#123; if(digit[num][i][j] == 1)&#123; var ball = &#123; x:14*(R+2)*index + j*2*(R+1)+(R+1), y:i*2*(R+1)+(R+1), stepX:Math.floor(Math.random() * 4 -2), stepY:-2*numArray[Math.floor(Math.random()*numArray.length)], color:colorArray[Math.floor(Math.random()*colorArray.length)], disY:1 &#125;; balls.push(ball); &#125; &#125; &#125; &#125; /*渲染*/ function render()&#123; //重置画布宽度，达到清空画布的效果 canvas.height = 100; //渲染时钟 for(var i = 0; i &lt; data.length; i++)&#123; renderDigit(i,data[i]); &#125; //渲染小球 for(var i = 0; i &lt; balls.length; i++)&#123; cxt.beginPath(); cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI); cxt.fillStyle = balls[i].color; cxt.closePath(); cxt.fill(); &#125; &#125; clearInterval(oTimer); var oTimer = setInterval(function()&#123; //更新时钟 updateDigitTime(); //更新小球状态 updateBalls(); //渲染 render(); &#125;,50);&#125;&#125;)();&lt;/script&gt;在 /themes/next/layout/_macro/sidebar.swig 中引入：1&#123;% include '../_custom/clock.swig' %&#125;网站运行时间在 /themes/next/layout/_custom/ 下新建 runtime.swig，拷贝如下内容：123456789101112131415161718192021222324252627&lt;div id="days"&gt;&lt;/div&gt;&lt;/script&gt;&lt;script language="javascript"&gt;function show_date_time()&#123;window.setTimeout("show_date_time()", 1000);BirthDay=new Date("08/07/2019 20:00:00");today=new Date();timeold=(today.getTime()-BirthDay.getTime());sectimeold=timeold/1000secondsold=Math.floor(sectimeold);msPerDay=24*60*60*1000e_daysold=timeold/msPerDaydaysold=Math.floor(e_daysold);e_hrsold=(e_daysold-daysold)*24;hrsold=setzero(Math.floor(e_hrsold));e_minsold=(e_hrsold-hrsold)*60;minsold=setzero(Math.floor((e_hrsold-hrsold)*60));seconds=setzero(Math.floor((e_minsold-minsold)*60));document.getElementById('days').innerHTML="已运行"+daysold+"天"+hrsold+"时"+minsold+"分"+seconds+"秒";&#125;function setzero(i)&#123;if (i&lt;10)&#123;i="0" + i&#125;;return i;&#125;show_date_time();&lt;/script&gt;在 /themes/next/layout/_macro/sidebar.swig 中引入：1&#123;% include '../_custom/runtime.swig' %&#125;旋转魔方（个性化返回顶部）在 /themes/next/layout/_custom/ 下新建 cube-hollow.swig，内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205&lt;style&gt; /*最外层容器样式*/ .wrap &#123; width: 0px; height: 0px; /*margin: 80px;*/ /*position: relative;*/ position: fixed; bottom: 120px; right: 80px; z-index: 999; &#125; /*包裹所有容器样式*/ .cube &#123; width: 0px; height: 0px; margin: 0 auto; -webkit-transform-style: preserve-3d; transform-style: preserve-3d; transform: rotateX(-30deg) rotateY(-80deg); animation: rotate linear 10s infinite; &#125; @-webkit-keyframes rotate &#123; from &#123; transform: rotateX(0deg) rotateY(0deg); &#125; to &#123; transform: rotateX(360deg) rotateY(360deg); &#125; &#125; .cube div &#123; position: absolute; width: 50px; height: 50px; opacity: 0.8; transition: all .4s; &#125; /*定义所有图片样式*/ .pic &#123; width: 50px; height: 50px; &#125; .cube .out_front &#123; transform: rotateY(0deg) translateZ(25px); &#125; .cube .out_back &#123; transform: translateZ(-25px) rotateY(180deg); &#125; .cube .out_left &#123; transform: rotateY(-90deg) translateZ(25px); &#125; .cube .out_right &#123; transform: rotateY(90deg) translateZ(25px); &#125; .cube .out_top &#123; transform: rotateX(90deg) translateZ(25px); &#125; .cube .out_bottom &#123; transform: rotateX(-90deg) translateZ(25px); &#125; /*定义小正方体样式*/ .cube span &#123; display: block; width: 25px; height: 25px; position: absolute; top: 12px; left: 12px; &#125; .cube .in_pic &#123; width: 25px; height:25px; &#125; .cube .in_front &#123; transform: rotateY(0deg) translateZ(12px); &#125; .cube .in_back &#123; transform: translateZ(-12px) rotateY(180deg); &#125; .cube .in_left &#123; transform: rotateY(-90deg) translateZ(12px); &#125; .cube .in_right &#123; transform: rotateY(90deg) translateZ(12px); &#125; .cube .in_top &#123; transform: rotateX(90deg) translateZ(12px); &#125; .cube .in_bottom &#123; transform: rotateX(-90deg) translateZ(12px); &#125; /*鼠标移入后样式*/ .cube:hover .out_front &#123; transform: rotateY(0deg) translateZ(50px); &#125; .cube:hover .out_back &#123; transform: translateZ(-50px) rotateY(180deg); &#125; .cube:hover .out_left &#123; transform: rotateY(-90deg) translateZ(50px); &#125; .cube:hover .out_right &#123; transform: rotateY(90deg) translateZ(50px); &#125; .cube:hover .out_top &#123; transform: rotateX(90deg) translateZ(50px); &#125; .cube:hover .out_bottom &#123; transform: rotateX(-90deg) translateZ(50px); &#125;&lt;/style&gt;&lt;div class="wrap"&gt; &lt;!--包裹所有元素的容器--&gt; &lt;div class="cube"&gt; &lt;!--前面图片 --&gt; &lt;div class="out_front"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--后面图片 --&gt; &lt;div class="out_back"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--左面图片 --&gt; &lt;div class="out_left"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--右面图片 --&gt; &lt;div class="out_right"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--上面图片 --&gt; &lt;div class="out_top"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--下面图片 --&gt; &lt;div class="out_bottom"&gt; &lt;a onclick="back2top()"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KpEBJx.th.jpg" class="pic" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;!--小正方体 --&gt; &lt;span class="in_front"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;span class="in_back"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;span class="in_left"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;span class="in_right"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;span class="in_top"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;span class="in_bottom"&gt; &lt;img src="https://s2.ax1x.com/2019/10/14/KptCPf.th.jpg" class="in_pic" /&gt; &lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; function back2top()&#123; $('html, body').animate(&#123;scrollTop: 0&#125;, 500); &#125;&lt;/script&gt;在 /themes/next/layout/_custom/custom.swig 中引入新建的文件12345678&lt;!-- 旋转魔方 --&gt;&#123;% if theme.cube.enable %&#125; &#123;% if theme.cube.type == "mini" %&#125; &#123;% include 'cube-mini.swig' %&#125; &#123;% elseif theme.cube.type == "hollow" %&#125; &#123;% include 'cube-hollow.swig' %&#125; &#123;% endif %&#125;&#123;% endif %&#125;在主题 _config.yml 中新建以下动态配置项123cube: enable: true type: hollow # mini | hollow博文压缩 Hexo-Neat使用在站点根目录下安装 Hexo-Neat1$ npm install hexo-neat --save在站点配置文件中末尾添加以下相关配置即可，也可以按照自己的需求去自定义配置。12345678910111213141516171819202122# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩cssneat_css: enable: true exclude: - '*/*.min.css'# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/jquery.fancybox.pack.js' - '**/index.js'写作样式Hexo博客+Next主题进阶写作技巧音乐var ap=new APlayer({element:document.getElementById("aplayer-arJkZEUx"),narrow:!1,autoplay:!1,showlrc:3,music:{title:"Kill me",author:"none",url:"https://music.163.com/#/song?id=22435862",pic:"https://p2.music.126.net/nVXkoj5XI4MU4EZK-j6Zow==/109951162909861206.jpg?param=50y50",lrc:"https://歌词.lrc"}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)一些建议图片压缩可以使用 WebP 格式 的图片替代 JPG、PNG 等，比如这样： 示例图片，在 Chrome 和 FireFox 都正常，IE 和 Safari 目前还不兼容，毕竟是谷歌推出的技术。我们也可通过修改 hexo 代码，增加 webp 图片支持，比如 这篇文章，不过也有点麻烦 -.-!下边推荐一个不错的网站，在线 JPG to WebP，再 WebP to JPG，图片就会被压缩，支持 GIF 、Video 等多种格式转换。Online GIF maker and image editor拷贝转换后的 webp 图片地址，再选择 WebP to JPG 选项，粘贴进输入框，upload 后，在 image quality factor、Background color 默认情况下，转回 JPG ：相比 webp，图片又变大了，但相比原图，却是小了很多，压缩了好几倍，清晰度没什么太大变化。部分图片压缩效果可能没那么理想，比如本身就不大的图片，有时候反而还压大了。转 PNG 图片会大一些，可先转为 JPG，对清晰度要求不高的，可以尝试多转换几次。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MechineLearning]]></title>
    <url>%2Fposts%2Fd52d06dc.html</url>
    <content type="text"><![CDATA[Python学习路线]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C程序的编译过程]]></title>
    <url>%2Fposts%2F7d23856.html</url>
    <content type="text"><![CDATA[前面的话学了这么久C++，但还是真不知道C++是如何编译成可执行文件的，下面我们就来探索探索C++的编译过程！大体编译过程在深入理解计算机系统吗，我们知道C语言的编译大致过程如下C源程序－&gt;编译预处理－&gt;编译程序(生成*.s文件)－&gt;优化程序－&gt;汇编程序(生成*.o文件)－&gt;链接程序－&gt;可执行文件（*.out）下面一步一步解析1.预编译过程编译预处理 :&emsp;&emsp;读取c源程序，对其中的伪指令（以#开头的指令）和特殊符号进行处理。伪指令主要包括以下四个方面:(1) 宏定义指令如#define和#undef#define分带参的和不带参的不带参的宏定义 #define 宏名 常量串1#define name "wujiahong"运行cout &lt;&lt; name &lt;&lt; endl;的结果为wujiahong带参的宏定义 #define 宏名(形参表） 表达式串1234#define sum(a,b) (a)+(b);//TODOint c = sum(1, 2);cout &lt;&lt; c &lt;&lt; endl;运行结果为 3处理过程：编译预处理后产生一个中间文件，文件中所有宏名（如果是带参数的宏，则宏名包括参数表在内）均用其对应的常量串或表达式串代替。替换过程称为“宏替换”或“宏展开”(2) 头文件包含指令如#include “FileName”或者#include等。#include&lt;文件名&gt;预处理器将在include子目录下搜索由文件名所指明的文件。这种方式称为“标准方式”，适用于嵌入C++提供的头文件，因为这些头文件一般都存在C++系统目录的include子目录下。#include ″文件名″预处理器将首先在当前文件所在目录下搜索，如果找不到再按标准方式搜索。这种方式适用于嵌入用户自己建立的头文件。(3) 条件编译指令如*#ifdef,#ifndef,#else,#elif,#endif,*等等命令作用#if编译预处理中的条件命令，相当于C语法中的if语句#ifdef判断某个宏是否被定义，若已定义，执行随后的语句#ifndef与#ifdef相反，判断某个宏是否未被定义#elif若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if#else与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else#endif#if, #ifdef, #ifndef这些条件命令的结束标志.defined与#if, #elif配合使用，判断某个宏是否被定义(4) 特殊符号&emsp;&emsp;预编译程序可以识别一些特殊的符号。例如在源程序中出现的LINE标识将被解释为当前行号（十进数），FILE则被解释为当前被编译的C源程序的名称。预编译程序对于在源程序中出现的这些串将用合适的值进行替换。预编译程序所完成的基本上是对源程序的“替代”工作。经过此种替代，生成一个没有宏定义、没有条件编译指令、没有特殊符号的输出文件。这个文件的含义同没有经过预处理的源文件是相同的，但内容有所不同。下一步，此输出文件将作为编译程序的输入而被翻译成为机器指令。删除所有注释“//”，“/ /”以及添加行号，便于编译器编译时产生调试用的行号信息及用于编译时产生编译错误或警告时显示行号。2. 编译阶段&emsp;&emsp;经过预编译得到的输出文件中，只有常量。如数字、字符串、变量的定义，以及C语言的关键字，如main、if、else、for、while、{,}、+、-、*、\等等。编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码（符号表）。3. 优化阶段&emsp;&emsp;优化一部分是对中间代码的优化。这种优化不依赖于具体的计算机。另一种优化则主要针对目标代码的生成而进行的。&emsp;&emsp;对于前一种优化，主要的工作是删除公共表达式、循环优化（代码外提、强度削弱、变换循环控制条件、已知量的合并等）、复写传播，以及无用赋值的删除等等。后一种类型的优化同机器的硬件结构密切相关，最主要的是考虑如何充分利用机器的各个硬件寄存器存放的有关变量的值，以减少对于内存的访问次数。另外，如何根据机器硬件执行指令的特点（如流线、RISC、CISC、VLIW等）而对指令进行一些调整使目标代码比较短，执行的效率比较高，也是一个重要的研究课题。经过优化得到的汇编代码必须经过汇编程序的汇编转换成相应的机器指令，方可能被机器执行。4. 汇编过程&emsp;&emsp;汇编过程实际上指把汇编语言代码翻译成目标机器指令的过程。对于被翻译系统处理的每一个汇编源程序，都将最终经过这一处理而得到相应的目标文件。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。目标文件由段组成。通常一个目标文件中至少有两个段：&emsp;&emsp;&emsp;代码段： 该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写。&emsp;&emsp;&emsp;数据段： 主要存放程序中要用到的各种全局变量或静态的局部变量。（.rodata和 .data）&ensp;&ensp;UNIX环境下主要有三种类型的目标文件：&emsp;&emsp;（1）可重定位文件： 其中包含有适合于其它目标文件链接来创建一个可执行的或者共享的目标文件的代码和数据。&emsp;&emsp;（2）共享的目标文件： 这种文件存放了适合于在两种上下文里链接的代码和数据。第一种是链接程序可把它与其它可重定位文件及共享的目标文件一起处理来创建另一个目标文件；第二种是动态链接程序将它与另一个可执行文件及其它的共享目标文件结合到一起，创建一个进程映象。&emsp;&emsp;（3）可执行文件： 它包含了一个可以被操作系统创建一个进程来执行之的文件。汇编程序生成的实际上是第一种类型的目标文件。对于后两种还需要其他的一些处理方能得到，这个就是链接程序的工作了。5. 链接程序&emsp;&emsp;由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。例如，某个源文件中的函数可能引用了另一个源文件中定义的某个符号（如变量或者函数调用等）；在程序中可能调用了某个库文件中的函数，等等。所有的这些问题，都需要经链接程序的处理方能得以解决。&emsp;&emsp;链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。&emsp;&emsp;根据开发人员指定的库函数的链接方式的不同，链接处理可分为两种：&emsp;&emsp;（1）静态链接 在这种链接方式下，函数的代码（被应用程序引用的目标模块）将从其所在地静态链接库中被拷贝到最终的可执行程序中。这样该程序在被执行时这些代码将被装入到该进程的虚拟地址空间中。静态链接库实际上是一个目标文件的集合，其中的每个文件含有库中的一个或者一组相关函数的代码。静态连接的劣势：浪费内存和磁盘空间，模块更新困难。&emsp;&emsp;（2）动态链接 在此种方式下，函数的代码被放到称作是动态链接库或共享对象的某个目标文件中。链接程序此时所作的只是在最终的可执行程序中记录下共享对象的名字以及其它少量的登记信息。在此可执行文件被执行时，动态链接库的全部内容将被映射（优点：无拷贝环节，在内存中只有一份此共享代码，以节约存储器空间）到运行时相应进程的虚地址空间。动态链接程序将根据可执行程序中记录的信息找到相应的函数代码。\&emsp;&emsp;动态连接解决了共享的目标文件多个副本浪费磁盘和内存空间的问题。在内存中共享一个目标文件模块的好处不仅仅是节省内存，还可以减少物理页面的换入换出，亦可以增加CPU的cache hit （关于这部分在《深入理解计算机系统》中有详细介绍，尤其是程序的局部性原理的应用，以前写代码都是瞎写，根本不知道还有这么个优势）。&emsp;&emsp;动态连接也有其缺点：很常见的一个问题是，当程序所依赖的某个模块更新后，由于新的模块与旧的模块之间接口不兼容，导致原有的程序无法运行。]]></content>
      <tags>
        <tag>C++</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux(一) 文件及目录基本操作]]></title>
    <url>%2Fposts%2Fa625b86.html</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于刚开始接触Linux的小菜鸡来说，Linux真的让人摸不着头脑。在Linux中最核心的就是命令行操作，但是要想熟练的使用命令行，那首先就必须知道基本的文件目录操作！因为这是基石鸭！！Linux目录结构Linux的目录结构是呈倒树形的，如下图核心目录及其存放内容目录内容/bin构建最小系统所需要的命令/sbin和操作系统有关的命令/boot内核与启动文件/dev各种设备文件/etc系统软件的启动和配置文件/home用户的主目录/root超级用户root的根目录/usr非系统的程序和命令/var系统专用的数据和配置文件/opt可选的应用软件包/tmp临时文件存放点路径绝对路径​ 从根目录(/)开始写起的文件或者目录。相对路径​ 由当前目录开始写起的文件或者目录。其中.表示当前目录，..表示上一级目录,查看当前目录用pwd改变工作目录使用方法：1cd [目录]例如：12cd .. //返回上一级目录cd /home/Download //进入Download目录新增目录使用方法：1mkdir [-m 模式] [-p] 目录名-m按指定存储模式建立目录-p建立目录时建立其所有不存在的父目删除目录使用方法：1rmdir [-p] 目录名此命令要求其父目录拥有写权限-p删除目录和其父目录复制文件或目录使用方法：1cp 源文件或目录 目的文件或目录此命令要求其父目录拥有写权限移动文件或目录使用方法：1mv 源文件或目录 目的文件或目录此命令要求其父目录拥有写权限删除文件或目录使用方法：1rm [-ir] 文件或目录此命令要求其父目录拥有写权限查找文件或目录使用方法：1find [路径] [参数]例如：1find /-name smcapp查看文件内容方法：12345cat： 直接查阅文件内容，不翻页more： 翻页查看文件内容less： 类似more，比more更有弹性head： 查看文件前面几行内容，默认10行tail： 查肯文件后面几行内容，默认10行]]></content>
      <tags>
        <tag>学习</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO博客优化（一）]]></title>
    <url>%2Fposts%2Fa99288f7.html</url>
    <content type="text"><![CDATA[HEXO博客（一）添加居中模块1&lt;blockquote class="blockquote-center"&gt;多去发掘别人身上的闪光点&lt;/blockquote&gt;多去发掘别人身上的闪光点添加小红心将 love.js 文件添加到 \themes\next\source\js\src 文件目录下。找到 \themes\next\layout\_layout.swing 文件， 在文件的后面，!function(t){function n(){for(var n=0;n]]></content>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分治法]]></title>
    <url>%2Fposts%2F7f3bcd7f.html</url>
    <content type="text"><![CDATA[1.分治法的分析分治法往往会使用递归的方法，主要包含以下三个步骤分解解决合并使用递归方程对其运行时间进行分析假设把原问题分解成a个子问题，每个子问题的规模是原问题的1/b，分解问题成子问题需要时间D(n)，合并子问题需要C(n)，那么可以得到如下的递归式：]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学生会个人总结]]></title>
    <url>%2Fposts%2F5e3e2bfc.html</url>
    <content type="text"><![CDATA[​ 大二的下学期刚刚来临，马上也就要进入大三了。回首当初懵懂无知的我，啥也不知道，有的只是好奇。从第一次参加学生会的面试的彷徨到自己面试新生的坦然，从中是我的成长。进入的计软团委学生会之后，我也从中慢慢学习，渐渐的成长，知道了怎么合作，有了一颗上进的心。​ 大一的时候，在部长们的带领下，完成了大型的迎新晚会和院内的毕业晚会的举办。真的感谢我的部长们，因为只有到了后来我做部长的时候，我才知道举办一场活动是有多么困难，其中需要协调的事真的很多。每一次的例会，每一次的工作，我都认真对待，虽然想法没有别人多，但我总时认真对待。到最后，我也总结出一场活动大致需要什么。一场活动最多也就几个小时，但是准备这场活动却要几个星期，甚至一个月。其中又分前期准备、中期准备还有后期准备，另外还有场制以及宣称和经费要考虑。所有的这些环节，少一个都不行，所以到了办活动的时候，我们就会有很多会议要开，大家一起讨论，一起商量，为的都是怎么把这个活动办好。有时候，宣传不是我们文娱部的擅长，这个时候我们就会找到我们的信宣部作为我们的后援，从这里，我也学会了合作的重要性。一个人的能力是远不及大家一起的努力的，众人拾柴才能火焰高！​ 作为文娱部的副部长，我觉的我的能力不是很够。在学生会担任部长的日子里，我看见很多比我优秀的人，它们或者擅于管理，或者擅于沟通，而我可能相对比较内敛，没有它们如此优秀。但是我总是在向他们看齐，他们是我最好的学习榜样。有些时候我也确实会觉得那个人或者谁谁不好，但是后面我这些观念都慢慢改变了。这可能源于我自己的学习，是我在一部电影《了不起的盖茨比》记忆深刻的一句话：“多去发现别人身上的闪光点”，而不是总看着别人的缺点。​ 在之后的文娱部有了新一届的干事之后，我们还要想着如何管理和培养它们，我们会给他们一部分事情做，让他们从中学习。从这里我也渐渐学习到一些管理的经验。​ 除了是一位学生会的成员，我其实也是一位爱学习的大学生，因为来到大学就是来学习的，在学生会是学习，学习专业知识也不能落下。以前的我几乎很少去图书馆，更多的是在宿舍玩游戏，甚至不知道有自习室。但是，我渐渐发现，以这样的生活度过我的大学生活，是不值得的。我想要成长，我想要进步，我想要和别人一样优秀。之后的我虽然有时也玩玩游戏，但是性质却跟以往不一样了，我真正能够做到控制自己，花更多的精力在学习上。​ 除了学习，我还有参加体育锻炼。我凭借自己的额实力，进入了院内的乒乓球队。在乒乓球队里面，我又认识到许多优秀的人，它们也不仅仅是只会打乒乓，每周一次和他们在一起训练的时候我也能学到很多。​ 总而言之，我认为自己的大学生活还是可以的。但是我自身也还有许多需要提高的地方，如何变得坦然，如何更加细致，如何擅于交流，这些都是我需要去解决的自身缺点，我希望在我未来的两年大学生活中，我能够迎着风继续进步！]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客优化(0)]]></title>
    <url>%2Fposts%2F94271a3a.html</url>
    <content type="text"><![CDATA[插入音乐🎵很多音乐网站因为版权原因无法生成外链，这里介绍的是自己生成的外链第一步 安装hexo-tag-aplayer插件切换到hexo的目录下，运行以下代码进行安装：1npm install --save hexo-tag-aplayer第二步 在markdown文档中需要添加音乐的地方添加以下代码1npm install --save hexo-tag-aplayer（单首歌曲）添加歌单的方法1&#123;% aplayerlist %&#125;&#123;"narrow": false,"autoplay": true,"showlrc": 3,"mode": "random","music": [&#123;"title": "平凡之路","author": "朴树","url": "http://og9ocpmwk.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.mp3","pic": "https://ogd99kckh.qnssl.com/1.jpg","lrc": "http://og9ocpmwk.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.txt"&#125;,&#123;"title": "野子","author": "苏运莹","url": "http://og9ocpmwk.bkt.clouddn.com/01%20%E9%87%8E%E5%AD%90.m4a","pic": "http://og9ocpmwk.bkt.clouddn.com/%E9%87%8E%E5%AD%90.jpg","lrc":"https://ogd99kckh.qnssl.com/%E9%87%8E%E5%AD%90.txt"&#125;]&#125;&#123;% endaplayerlist %&#125;markdown插入音乐一般做法因为markdown兼容HTML语法，故可以在markdown文件中直接用HTML语法1&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheightheight=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=420125990&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;插入视频第一步： 安装hexo-tag-dplayer切换到hexo的目录下，运行以下代码进行安装：1npm install hexo-tag-dplayer --save第二步： 在markdown文档中需要添加视频的地方添加以下代码1&#123;% dplayer "url=http://devtest.qiniudn.com/若能绽放光芒.mp4" "api=http://dplayer.daoapp.io" "pic=http://devtest.qiniudn.com/若能绽放光芒.png" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %&#125;markdown插入视频一般做法因为markdown兼容HTML语法，故可以在markdown文件中直接用HTML语法1&lt;embed src="http://player.youku.com/player.php/Type/Folder/Fid/27690810/Ob/1/sid/XMTY1MTI3NjMyNA==/v.swf" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" allowFullScreen="true" mode="transparent" type="application/x-shockwave-flash"&gt;&lt;/embed&gt;123&lt;video width="480" height="320" controls&gt;&lt;source src="movie.mp4"&gt;&lt;/video&gt;]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的基本操作]]></title>
    <url>%2Fposts%2F9be60828.html</url>
    <content type="text"><![CDATA[markdown基本语法标题用#表示，一个#表示一级标题，两个#表示二级标题，以此类推，一共六级标题。例如下面所示列表*+空格 无序列表数字+.+空格 有序列表引用引用 像这样，操作为j尖括号 &gt; +引用文本即可 图片与链接操作如下图:粗体与斜体用两个*包含一段文字即可使用粗体，**这里是粗体** 用一个\*包含一段文字就是斜体，*这里是斜体* 表格​ 表格的创建比较麻烦12345| Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 |这是普通使用代码来写表格，但是考虑到这样写表格很麻烦，这里推荐一个轻量级编辑器Typora下面是编辑器的创建表格操作然后就可以看到创建出来的额表格了，如下图，是不是很方便！代码框作为一名优雅的程序员，要把代码优雅的放在文章里，那就使用&gt;code吧12345678910def Select_Sort(A,len): for i in range(len): key = i for j in range(i+1,len): if A[j] &lt; A[key]: key = j if key != i: temp = A[key] A[key] = A[i] A[i] = temp在Typora工具中的段落中亦可找到相应操作分割线分割线的语法只需要另起一行，连续输入三个星号 *** 即可。var ap=new APlayer({element:document.getElementById("aplayer-gOmzYqQk"),narrow:!1,autoplay:!0,showlrc:!1,music:{title:"“国王与乞丐”",author:"华晨宇",url:"https://file.globalupload.io/fvBf86IOBS.mp3",pic:"https://i.kfs.io/album/global/7070089,0v1/fit/500x500.jpg",lrc:""}});window.aplayers||(window.aplayers=[]),window.aplayers.push(ap)]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Let‘s think！]]></title>
    <url>%2Fposts%2Fb0289f51.html</url>
    <content type="text"><![CDATA[前段日子看了一部日剧名字叫做《3年A半全员人质》，感觉收获还是蛮多的。它教会我们不仅要学会成熟，还要学会思考。Let’s think！]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2Fposts%2Fa1751c09.html</url>
    <content type="text"><![CDATA[Start Today!Git常用命令创建用户名12$ git config --global user.name "yourname"$ git config --global user.email "youremail"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
  </entry>
</search>
